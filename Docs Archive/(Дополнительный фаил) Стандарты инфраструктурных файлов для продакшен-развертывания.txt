# Стандарты инфраструктурных файлов для продакшен-развертывания

## Содержание
1. [Введение](#введение)
2. [Структура репозитория микросервиса](#структура-репозитория-микросервиса)
3. [Dockerfile](#dockerfile)
4. [Docker Compose (для локальной разработки)](#docker-compose-для-локальной-разработки)
5. [Kubernetes Manifests (Helm Chart)](#kubernetes-manifests-helm-chart)
6. [Конфигурация (Environment Variables и ConfigMaps)](#конфигурация-environment-variables-и-configmaps)
7. [Управление секретами (Secrets)](#управление-секретами-secrets)
8. [CI/CD Pipeline](#cicd-pipeline)
9. [Миграции базы данных](#миграции-базы-данных)
10. [Конфигурация мониторинга и логирования](#конфигурация-мониторинга-и-логирования)
11. [Заключение](#заключение)

## Введение

Данный документ определяет стандарты для инфраструктурных файлов, необходимых для сборки, тестирования, развертывания и эксплуатации микросервисов российского аналога платформы Steam в продакшен-среде. Стандарты направлены на унификацию подходов, повышение автоматизации и обеспечение надежности развертывания.

Стандарты разработаны с учетом использования Go в качестве основного языка программирования для бэкенда, PostgreSQL в качестве основной базы данных и Kubernetes в качестве платформы оркестрации.

## Структура репозитория микросервиса

Рекомендуемая структура каталогов для репозитория каждого микросервиса:

```
service-name/
├── cmd/                  # Основные приложения (entrypoints)
│   └── service-name/     # Главный пакет приложения
│       └── main.go
├── internal/             # Приватный код приложения (бизнес-логика, репозитории и т.д.)
│   ├── config/
│   ├── handler/
│   ├── repository/
│   └── service/
├── pkg/                  # Публичные библиотеки, которые могут использоваться другими сервисами (редко)
├── api/                  # Спецификации API (OpenAPI, gRPC proto)
│   └── proto/
├── migrations/           # SQL-миграции базы данных
├── build/                # Файлы, связанные со сборкой
│   └── package/
│       └── Dockerfile
├── deployments/          # Файлы для развертывания
│   ├── helm/
│   │   └── service-name/ # Helm chart для сервиса
│   └── docker-compose.yml # Для локальной разработки
├── configs/              # Примеры конфигурационных файлов
│   └── config.yml
├── test/                 # Тесты (unit, integration, e2e)
├── .gitignore
├── go.mod
├── go.sum
├── Makefile              # Утилиты для сборки, тестирования, линтинга
└── README.md
```

## Dockerfile

Стандартный многоэтапный Dockerfile для Go-приложений:

```dockerfile
# Этап 1: Сборка приложения
FROM golang:1.21-alpine AS builder

# Установка зависимостей для сборки (если нужны CGO, например, для SQLite)
# RUN apk add --no-cache gcc musl-dev

WORKDIR /app

# Копирование файлов зависимостей и загрузка зависимостей
COPY go.mod go.sum ./
RUN go mod download

# Копирование исходного кода
COPY . .

# Сборка приложения
# CGO_ENABLED=0 отключает CGO, что упрощает кросс-компиляцию и уменьшает размер
# -ldflags="-w -s" удаляет отладочную информацию и символы, уменьшая размер бинарника
RUN CGO_ENABLED=0 go build -ldflags="-w -s" -o /service-name ./cmd/service-name

# Этап 2: Создание минимального финального образа
FROM alpine:latest

# Установка корневых сертификатов
RUN apk add --no-cache ca-certificates

# Установка зависимостей времени выполнения (если нужны)
# RUN apk add --no-cache ...

WORKDIR /app

# Копирование бинарного файла из этапа сборки
COPY --from=builder /service-name .

# Копирование конфигурационных файлов или шаблонов (если нужно)
# COPY configs/config.yml .

# Копирование статических файлов (если нужно)
# COPY web/static ./web/static

# Создание непривилегированного пользователя
RUN addgroup -S appgroup && adduser -S appuser -G appgroup
USER appuser

# Порт, который слушает приложение
EXPOSE 8080

# Команда для запуска приложения
ENTRYPOINT ["/app/service-name"]

# Аргументы по умолчанию (например, путь к конфигу)
# CMD ["-config", "/app/config.yml"]
```

**Рекомендации:**
- Использовать минимальные базовые образы (alpine).
- Использовать многоэтапную сборку для уменьшения размера финального образа.
- Запускать приложение от непривилегированного пользователя.
- Минимизировать количество слоев.
- Использовать `.dockerignore` для исключения ненужных файлов.

## Docker Compose (для локальной разработки)

Пример `docker-compose.yml` для локального запуска сервиса и его зависимостей (например, PostgreSQL):

```yaml
version: '3.8'

services:
  service-name:
    build:
      context: .
      dockerfile: build/package/Dockerfile
    container_name: service-name
    ports:
      - "8080:8080" # Маппинг порта приложения
      # - "9090:9090" # Маппинг порта метрик Prometheus
    environment:
      # Переменные окружения для конфигурации
      - APP_PORT=8080
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=service_db
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
      # ... другие переменные
    depends_on:
      - postgres
      - jaeger # Пример зависимости от Jaeger для трассировки
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=service_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "6831:6831/udp" # Jaeger agent
      - "16686:16686"   # Jaeger UI
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
```

**Рекомендации:**
- Использовать для локальной разработки и интеграционного тестирования.
- Определять зависимости между сервисами.
- Использовать volumes для сохранения данных (например, БД).
- Использовать сети для изоляции.

## Kubernetes Manifests (Helm Chart)

Рекомендуется использовать Helm для управления Kubernetes-манифестами. Стандартная структура Helm chart:

```
deployments/helm/service-name/
├── Chart.yaml          # Информация о чарте
├── values.yaml         # Значения по умолчанию
├── templates/          # Шаблоны манифестов
│   ├── _helpers.tpl    # Вспомогательные шаблоны
│   ├── deployment.yaml # Шаблон Deployment
│   ├── service.yaml    # Шаблон Service
│   ├── configmap.yaml  # Шаблон ConfigMap (если нужен)
│   ├── secret.yaml     # Шаблон Secret (для управления через Helm, не рекомендуется для продакшена)
│   ├── ingress.yaml    # Шаблон Ingress (если нужен)
│   ├── hpa.yaml        # Шаблон HorizontalPodAutoscaler (если нужен)
│   ├── pdb.yaml        # Шаблон PodDisruptionBudget (если нужен)
│   ├── networkpolicy.yaml # Шаблон NetworkPolicy
│   └── serviceaccount.yaml # Шаблон ServiceAccount (если нужен)
├── charts/             # Зависимости чарта (например, PostgreSQL)
└── NOTES.txt           # Заметки после установки
```

**Пример `templates/deployment.yaml`:**

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "service-name.fullname" . }}
  labels:
    {{- include "service-name.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "service-name.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "service-name.selectorLabels" . | nindent 8 }}
      annotations:
        # Аннотации для сбора метрик Prometheus
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.service.metricsPort }}"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: {{ include "service-name.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
            - name: metrics
              containerPort: {{ .Values.service.metricsPort }}
              protocol: TCP
          env:
            # Переменные окружения из ConfigMap и Secret
            - name: APP_PORT
              value: "{{ .Values.service.port }}"
            - name: POSTGRES_HOST
              value: {{ .Values.config.postgres.host | quote }}
            - name: POSTGRES_PORT
              value: {{ .Values.config.postgres.port | quote }}
            - name: POSTGRES_DB
              value: {{ .Values.config.postgres.database | quote }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "service-name.fullname" . }}-postgres-secret
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "service-name.fullname" . }}-postgres-secret
                  key: password
            # Переменные для OpenTelemetry/Jaeger
            - name: OTEL_EXPORTER_JAEGER_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP # Отправка на агент на том же узле
            - name: OTEL_EXPORTER_JAEGER_AGENT_PORT
              value: "6831"
            - name: OTEL_SERVICE_NAME
              value: {{ include "service-name.fullname" . }}
          livenessProbe:
            httpGet:
              path: /healthz # Пример эндпоинта для liveness probe
              port: http
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /readyz # Пример эндпоинта для readiness probe
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
```

**Рекомендации:**
- Использовать Helm для шаблонизации и управления релизами.
- Определять `livenessProbe` и `readinessProbe`.
- Задавать `resources` (requests и limits).
- Использовать `ConfigMap` для нечувствительной конфигурации и `Secret` для чувствительной.
- Настраивать `NetworkPolicy` для изоляции трафика.
- Использовать `PodDisruptionBudget` для обеспечения доступности во время обновлений.
- Добавлять аннотации для интеграции с Prometheus.

## Конфигурация (Environment Variables и ConfigMaps)

- **Основной способ**: Переменные окружения.
- **Источники**: `ConfigMap` для нечувствительных данных, `Secret` для чувствительных.
- **Библиотека для Go**: `github.com/spf13/viper` для чтения конфигурации из переменных окружения и файлов.
- **Структура ConfigMap**: Один `ConfigMap` на приложение, содержащий все нечувствительные параметры.

**Пример `templates/configmap.yaml`:**

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "service-name.fullname" . }}-config
  labels:
    {{- include "service-name.labels" . | nindent 4 }}
data:
  POSTGRES_HOST: {{ .Values.config.postgres.host | quote }}
  POSTGRES_PORT: {{ .Values.config.postgres.port | quote }}
  POSTGRES_DB: {{ .Values.config.postgres.database | quote }}
  # ... другие нечувствительные параметры
```

## Управление секретами (Secrets)

- **Хранение**: Внешние системы управления секретами (HashiCorp Vault, Kubernetes Secrets с шифрованием etcd).
- **Доставка в Pod**: 
  - Через переменные окружения (менее безопасно).
  - Через монтирование как volume (рекомендуется).
  - Через CSI Secret Store Driver (наиболее безопасный вариант).
- **Создание Secret**: Вне Helm chart, через CI/CD или оператором.

**Пример `templates/secret.yaml` (только для примера, не для продакшена):**

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "service-name.fullname" . }}-postgres-secret
  labels:
    {{- include "service-name.labels" . | nindent 4 }}
type: Opaque
data:
  username: {{ .Values.secrets.postgres.username | b64enc | quote }}
  password: {{ .Values.secrets.postgres.password | b64enc | quote }}
```

## CI/CD Pipeline

Пример стадий для CI/CD пайплайна (например, GitLab CI):

```yaml
stages:
  - lint
  - test
  - security
  - build
  - deploy_staging
  - deploy_production

variables:
  IMAGE_TAG: $CI_COMMIT_TAG # Или $CI_COMMIT_SHA
  IMAGE_NAME: $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME

lint:
  stage: lint
  image: golangci/golangci-lint:v1.55-alpine
  script:
    - golangci-lint run ./...

test:
  stage: test
  image: golang:1.21-alpine
  script:
    - go test -v -race -coverprofile=coverage.out ./...
    - go tool cover -func=coverage.out
  artifacts:
    paths:
      - coverage.out

security_scan_code:
  stage: security
  image: securego/gosec:latest
  script:
    - gosec ./...

security_scan_deps:
  stage: security
  image: aquasec/nancy:latest
  script:
    - go list -json -m all | nancy sleuth

build_image:
  stage: build
  image: docker:20.10
  services:
    - docker:20.10-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $IMAGE_NAME:$IMAGE_TAG -f build/package/Dockerfile .
    - docker push $IMAGE_NAME:$IMAGE_TAG
  # Сканирование образа после сборки
    - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --severity CRITICAL,HIGH $IMAGE_NAME:$IMAGE_TAG

deploy_staging:
  stage: deploy_staging
  image: dtzar/helm-kubectl:latest
  script:
    - helm upgrade --install service-name deployments/helm/service-name \
      --namespace staging \
      --set image.tag=$IMAGE_TAG \
      -f deployments/helm/service-name/values-staging.yaml # Файл с настройками для staging
  environment:
    name: staging
    url: https://staging.example.com
  only:
    - main # Или develop

deploy_production:
  stage: deploy_production
  image: dtzar/helm-kubectl:latest
  script:
    - helm upgrade --install service-name deployments/helm/service-name \
      --namespace production \
      --set image.tag=$IMAGE_TAG \
      -f deployments/helm/service-name/values-production.yaml # Файл с настройками для production
  environment:
    name: production
    url: https://example.com
  when: manual # Ручной запуск для продакшена
  only:
    - tags # Запуск только для тегов
```

**Рекомендации:**
- Автоматизировать все шаги: линтинг, тесты, сканирование безопасности, сборку, деплой.
- Использовать разные конфигурации для разных окружений (staging, production).
- Внедрить сканирование безопасности кода, зависимостей и Docker-образов.
- Использовать ручное подтверждение для деплоя в продакшен.

## Миграции базы данных

- **Инструмент**: `golang-migrate/migrate`
- **Формат миграций**: SQL-файлы
- **Хранение**: в каталоге `migrations/`
- **Именование**: `YYYYMMDDHHMMSS_migration_name.up.sql` и `YYYYMMDDHHMMSS_migration_name.down.sql`
- **Применение**: 
  - Через `initContainer` в Kubernetes Deployment.
  - Отдельным Job перед деплоем приложения.
  - Вручную через CLI-утилиту.

**Пример `initContainer`:**

```yaml
spec:
  template:
    spec:
      initContainers:
        - name: db-migration
          image: migrate/migrate:v4 # Образ с утилитой migrate
          command: ['/bin/sh', '-c']
          args:
            - >
              migrate
              -path /migrations
              -database "postgres://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):$(POSTGRES_PORT)/$(POSTGRES_DB)?sslmode=disable"
              up
          env:
            # Переменные окружения для подключения к БД
            - name: POSTGRES_HOST
              value: {{ .Values.config.postgres.host | quote }}
            # ... остальные переменные из Secret
          volumeMounts:
            - name: migrations-volume
              mountPath: /migrations
      containers:
        # ... основной контейнер приложения
      volumes:
        - name: migrations-volume
          configMap:
            name: {{ include "service-name.fullname" . }}-migrations # ConfigMap с SQL-файлами миграций
```

## Конфигурация мониторинга и логирования

### Prometheus

- **ServiceMonitor**: Kubernetes CRD для автоматического обнаружения эндпоинтов метрик.
- **PrometheusRule**: Kubernetes CRD для определения правил алертинга.

**Пример `ServiceMonitor`:**

```yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: {{ include "service-name.fullname" . }}
  labels:
    release: prometheus # Метка для обнаружения Prometheus Operator
    {{- include "service-name.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "service-name.selectorLabels" . | nindent 6 }}
  endpoints:
  - port: metrics # Имя порта метрик из Service
    interval: 15s
    path: /metrics
  namespaceSelector:
    matchNames:
    - {{ .Release.Namespace }}
```

### Fluent Bit / Fluentd

- **DaemonSet**: для сбора логов со всех узлов.
- **Парсинг**: настройка парсеров для JSON-логов от Go-приложений.
- **Фильтрация**: добавление метаданных Kubernetes (pod name, namespace, labels).
- **Отправка**: в Elasticsearch или ClickHouse.

### Jaeger

- **Jaeger Agent**: развертывание как DaemonSet для приема UDP-трафика от приложений.
- **Jaeger Collector**: прием спанов от агентов.
- **Jaeger Query**: UI для просмотра трассировок.

## Заключение

Стандартизация инфраструктурных файлов является ключевым фактором для построения надежной и масштабируемой микросервисной платформы. Использование единых подходов к Dockerfile, Helm charts, CI/CD, конфигурации и миграциям упрощает разработку, тестирование и эксплуатацию системы. Следование данным стандартам позволит обеспечить согласованность и автоматизацию процессов развертывания для всех микросервисов российского аналога платформы Steam.
