# Спецификация микросервиса Social Service

## Содержание

1. [Введение](#1-введение)
2. [Требования и цели](#2-требования-и-цели)
3. [Архитектура](#3-архитектура)
4. [Бизнес-логика и сценарии использования](#4-бизнес-логика-и-сценарии-использования)
5. [Структура данных и API](#5-структура-данных-и-api)
6. [Интеграции с другими сервисами](#6-интеграции-с-другими-сервисами)
7. [Требования к безопасности, масштабируемости и отказоустойчивости](#7-требования-к-безопасности-масштабируемости-и-отказоустойчивости)
8. [Реализация и развертывание](#8-реализация-и-развертывание)
9. [Глоссарий](#9-глоссарий)

## 1. Введение

### 1.1 Назначение документа

Данный документ представляет собой полную спецификацию микросервиса Social Service для российского аналога платформы Steam. Документ содержит детальное описание требований, архитектуры, бизнес-логики, API, интеграций и нефункциональных требований, необходимых для полной реализации микросервиса. Он предназначен для разработчиков, архитекторов, тестировщиков и менеджеров проекта.

### 1.2 Область применения

Social Service отвечает за все социальные взаимодействия на платформе. Это включает управление профилями пользователей, списки друзей, группы, чаты, ленты активности, отзывы, комментарии, форумы и другие социальные функции. Сервис призван способствовать общению и взаимодействию между пользователями платформы, создавая активное сообщество.

### 1.3 Связь с другими микросервисами

Social Service тесно интегрирован с другими компонентами платформы:

- **Account Service** - для получения и обновления основной информации профиля пользователя.
- **Auth Service** - для аутентификации и авторизации пользователей при выполнении социальных действий.
- **Library Service** - для получения информации об играх пользователя, игровом времени и достижениях для отображения в профилях и лентах активности.
- **Catalog Service** - для получения метаданных игр при написании отзывов, обсуждении игр и т.д.
- **Notification Service** - для отправки уведомлений о социальных событиях (новые сообщения, запросы в друзья, упоминания).
- **Admin Service** - для модерации контента (отзывы, комментарии, сообщения).
- **Analytics Service** - для сбора данных о социальной активности.

## 2. Требования и цели

### 2.1 Назначение сервиса

Social Service предназначен для реализации и управления всеми социальными функциями платформы, способствуя формированию и развитию сообщества пользователей.

### 2.2 Основные цели

1. Обеспечение функционала для управления профилями пользователей и их кастомизации.
2. Реализация системы дружбы и управления контактами.
3. Создание и управление группами пользователей по интересам.
4. Обеспечение функционала для обмена сообщениями (личные чаты, групповые чаты).
5. Реализация ленты активности пользователей.
6. Создание системы отзывов и комментариев к играм и другому контенту.
7. Обеспечение функционала форумов и обсуждений.
8. Модерация пользовательского контента.
9. Интеграция с другими сервисами для отображения релевантной социальной информации.

### 2.3 Функциональные требования

#### 2.3.1 Управление профилями пользователей

- Отображение расширенной информации профиля (никнейм, аватар, фон профиля, описание, статус, ссылки на соцсети).
- Настройка приватности профиля и отдельных его частей.
- Отображение списка друзей, групп, значков, достижений, игрового времени.
- Возможность кастомизации профиля (витрины, фоны).
- Отображение ленты активности пользователя.
- Управление списком заблокированных пользователей.

#### 2.3.2 Управление друзьями

- Отправка, принятие и отклонение запросов в друзья.
- Отображение списка друзей с их статусами (онлайн, офлайн, в игре).
- Удаление из списка друзей.
- Поиск пользователей.
- Рекомендации друзей.
- Управление псевдонимами друзей.

#### 2.3.3 Управление группами

- Создание, редактирование и удаление групп.
- Управление членством в группах (приглашение, вступление, исключение, роли).
- Настройка приватности групп (открытые, закрытые, по приглашению).
- Публикация объявлений и новостей в группах.
- Организация обсуждений и форумов внутри групп.
- Управление контентом группы (модерация).

#### 2.3.4 Обмен сообщениями (Чаты)

- Личные чаты между пользователями.
- Групповые чаты.
- Отображение статуса доставки и прочтения сообщений.
- Поддержка текстовых сообщений, эмодзи, изображений, ссылок.
- История сообщений.
- Уведомления о новых сообщениях.
- Управление настройками чатов (уведомления, черный список).

#### 2.3.5 Лента активности

- Отображение хронологической ленты событий друзей и групп (покупка игры, получение достижения, добавление в друзья, вступление в группу, написание отзыва и т.д.).
- Фильтрация ленты активности.
- Возможность лайкать и комментировать события в ленте.
- Настройка того, какие события попадают в ленту.

#### 2.3.6 Отзывы и комментарии

- Возможность оставлять отзывы к играм (текст, оценка).
- Отображение отзывов на страницах игр.
- Сортировка и фильтрация отзывов (полезные, недавние, положительные, отрицательные).
- Возможность оценивать отзывы ("полезный", "не полезный").
- Возможность оставлять комментарии к отзывам, новостям, событиям в ленте, профилям.
- Древовидная структура комментариев.
- Модерация отзывов и комментариев.

#### 2.3.7 Форумы и обсуждения

- Создание и управление форумами (общими и для конкретных игр/групп).
- Создание тем и сообщений на форумах.
- Поддержка форматирования текста, вставки изображений и ссылок.
- Подписка на темы и форумы.
- Модерация форумов.

#### 2.3.8 Модерация

- Инструменты для модераторов для просмотра и управления пользовательским контентом (профили, отзывы, комментарии, сообщения, контент групп).
- Система жалоб на контент.
- Автоматическая фильтрация нежелательного контента (спам, нецензурная лексика).
- Управление блокировками и предупреждениями для пользователей.

### 2.4 Нефункциональные требования

#### 2.4.1 Производительность

- Время отклика API для чтения (профили, лента, отзывы): P95 < 150 мс, P99 < 300 мс.
- Время отклика API для записи (отправка сообщения, лайк): P95 < 100 мс, P99 < 200 мс.
- Доставка сообщений в чатах в реальном времени (задержка < 1 сек).
- Поддержка высокой нагрузки на запись (лайки, комментарии, сообщения).

#### 2.4.2 Масштабируемость

- Горизонтальное масштабирование для обработки пиковых нагрузок.
- Поддержка миллионов активных пользователей и их социальных графов.
- Эффективное хранение и обработка больших объемов данных (сообщения, ленты активности).
- Возможность независимого масштабирования компонентов (чаты, лента, профили).

#### 2.4.3 Надежность

- Доступность: 99.95%.
- Устойчивость к сбоям компонентов.
- Гарантированная доставка сообщений в чатах (с возможной задержкой при сбоях).
- Резервное копирование данных профилей, друзей, сообщений.
- Время восстановления после сбоя (RTO): < 15 минут.
- Допустимая точка восстановления (RPO): < 5 минут.

#### 2.4.4 Безопасность

- Защита от несанкционированного доступа к данным пользователей.
- Соблюдение настроек приватности.
- Защита от спама и вредоносного контента.
- Безопасное хранение и передача данных.
- Аудит действий модераторов.

#### 2.4.5 Согласованность данных

- Согласованность данных профиля между Account Service и Social Service.
- Согласованность данных об играх и достижениях между Library/Catalog Service и Social Service.
- Согласованность в конечном счете для лент активности и счетчиков.

## 3. Архитектура

### 3.1 Общая архитектура

Social Service использует многослойную архитектуру, ориентированную на обработку большого количества запросов на чтение и запись, а также на поддержку реального времени для чатов. Применяются подходы CQRS (Command Query Responsibility Segregation) для разделения моделей чтения и записи, а также Event Sourcing для некоторых компонентов (например, чатов).

#### 3.1.1 Архитектурные слои

1. **Транспортный слой** (Transport Layer)
   - REST API для взаимодействия с клиентскими приложениями.
   - gRPC API для синхронного взаимодействия с другими микросервисами.
   - WebSocket API для поддержки чатов и обновлений в реальном времени.

2. **Сервисный слой** (Service Layer)
   - Реализация бизнес-логики для каждой социальной функции (профили, друзья, группы, чаты, лента, отзывы, форумы).
   - Оркестрация взаимодействия между компонентами.
   - Обработка команд (запись) и запросов (чтение).

3. **Репозиторный слой** (Repository Layer)
   - Взаимодействие с различными хранилищами данных (реляционные БД, NoSQL БД, графовые БД, кэши).
   - Абстракция доступа к данным.

4. **Инфраструктурный слой** (Infrastructure Layer)
   - Взаимодействие с брокерами сообщений (Kafka/RabbitMQ) для асинхронной обработки и событий.
   - Управление WebSocket соединениями.
   - Мониторинг, метрики, логирование, трассировка.
   - Интеграция с Notification Service.

#### 3.1.2 Структура проекта

```
social-service/
├── api/                      # API определения
│   ├── grpc/                 # gRPC протобуфы
│   ├── rest/                 # Swagger/OpenAPI спецификации
│   └── websocket/            # Спецификации WebSocket API
├── cmd/                      # Точки входа в приложение
│   └── server/               # Запуск основного сервера
│   └── worker/               # Запуск обработчиков очередей
├── configs/                  # Конфигурационные файлы
├── internal/                 # Внутренний код приложения
│   ├── domain/               # Доменные модели (User, Friend, Group, Message, Post, Review, etc.)
│   ├── pkg/                  # Внутренние пакеты
│   │   ├── cache/            # Клиент кэша
│   │   ├── events/           # Работа с событиями
│   │   ├── logger/           # Логирование
│   │   ├── metrics/          # Метрики и мониторинг
│   │   ├── moderation/       # Инструменты модерации
│   │   ├── realtime/         # Управление WebSocket
│   │   └── trace/            # Трассировка
│   ├── repository/           # Репозитории для доступа к данным
│   │   ├── postgres/         # Репозитории PostgreSQL (профили, группы, форумы)
│   │   ├── cassandra/        # Репозитории Cassandra (чаты, ленты)
│   │   ├── neo4j/            # Репозитории Neo4j (граф друзей)
│   │   └── redis/            # Репозитории Redis (кэш, статусы онлайн)
│   ├── service/              # Сервисные слои (по фичам: profile, friend, group, chat, feed, review, forum)
│   │   ├── command/          # Обработчики команд (запись)
│   │   └── query/            # Обработчики запросов (чтение)
│   └── transport/            # Транспортные слои
│       ├── grpc/             # gRPC обработчики
│       ├── rest/             # REST обработчики
│       └── websocket/        # WebSocket обработчики
├── migrations/               # Миграции баз данных
├── scripts/                  # Скрипты для разработки и деплоя
└── test/                     # Тесты
    ├── integration/          # Интеграционные тесты
    └── unit/                 # Модульные тесты
```

### 3.2 Компоненты системы

#### 3.2.1 Компонент управления профилями (Profile Service)

**Назначение**: Управление данными профилей пользователей.
**Ключевые функции**: CRUD операций для профилей, управление приватностью, кастомизация.
**Хранилища**: PostgreSQL (основные данные), Redis (кэш).
**Взаимодействие**: Account Service, Library Service.

#### 3.2.2 Компонент управления друзьями (Friend Service)

**Назначение**: Управление социальным графом пользователей.
**Ключевые функции**: Управление запросами в друзья, списком друзей, блокировками, рекомендациями.
**Хранилища**: Neo4j (граф друзей), Redis (статусы онлайн).
**Взаимодействие**: Notification Service.

#### 3.2.3 Компонент управления группами (Group Service)

**Назначение**: Управление группами пользователей.
**Ключевые функции**: CRUD групп, управление членством, объявления, обсуждения.
**Хранилища**: PostgreSQL.
**Взаимодействие**: Notification Service, Forum Service.

#### 3.2.4 Компонент чатов (Chat Service)

**Назначение**: Обеспечение обмена сообщениями в реальном времени.
**Ключевые функции**: Отправка/получение сообщений, история, статусы доставки/прочтения.
**Хранилища**: Cassandra (сообщения), Redis (активные чаты, соединения WebSocket).
**Технологии**: WebSocket, возможно Event Sourcing.
**Взаимодействие**: Notification Service.

#### 3.2.5 Компонент ленты активности (Feed Service)

**Назначение**: Формирование и отображение лент активности.
**Ключевые функции**: Агрегация событий, формирование персонализированных лент, лайки/комментарии к событиям.
**Хранилища**: Cassandra (ленты), Redis (кэш).
**Взаимодействие**: Library Service, Group Service, Review Service.

#### 3.2.6 Компонент отзывов и комментариев (Review & Comment Service)

**Назначение**: Управление отзывами и комментариями.
**Ключевые функции**: CRUD отзывов/комментариев, оценки, модерация.
**Хранилища**: PostgreSQL.
**Взаимодействие**: Catalog Service, Feed Service, Admin Service.

#### 3.2.7 Компонент форумов (Forum Service)

**Назначение**: Управление форумами и обсуждениями.
**Ключевые функции**: CRUD форумов/тем/сообщений, подписки, модерация.
**Хранилища**: PostgreSQL.
**Взаимодействие**: Group Service, Admin Service.

#### 3.2.8 Компонент модерации (Moderation Service)

**Назначение**: Централизованная обработка жалоб и управление модерацией.
**Ключевые функции**: Система жалоб, инструменты модерации, автоматическая фильтрация.
**Хранилища**: PostgreSQL (журнал модерации, жалобы).
**Взаимодействие**: Admin Service, все компоненты с пользовательским контентом.

### 3.3 Хранилища данных

- **PostgreSQL**: Для структурированных данных с транзакционными требованиями (профили, группы, форумы, отзывы, модерация).
- **Cassandra**: Для данных с высокой нагрузкой на запись и чтение, где не требуется сложная транзакционность (сообщения чатов, ленты активности).
- **Neo4j**: Для эффективного хранения и запросов к социальному графу (друзья, связи).
- **Redis**: Для кэширования, хранения статусов онлайн, управления WebSocket соединениями, временных данных.

### 3.4 Потоки данных

#### 3.4.1 Поток отправки сообщения в чат

1. Клиент отправляет сообщение через WebSocket.
2. Chat Service получает сообщение, валидирует его.
3. Сообщение сохраняется в Cassandra.
4. Chat Service определяет получателей и их активные WebSocket соединения (через Redis).
5. Сообщение отправляется получателям через WebSocket.
6. Если получатель офлайн, генерируется событие для Notification Service.
7. Обновляются статусы доставки/прочтения.

#### 3.4.2 Поток добавления друга

1. Пользователь А отправляет запрос в друзья пользователю Б через REST API.
2. Friend Service создает запись о запросе (статус pending) в Neo4j.
3. Friend Service отправляет событие для Notification Service.
4. Notification Service отправляет уведомление пользователю Б.
5. Пользователь Б принимает запрос через REST API.
6. Friend Service обновляет статус связи в Neo4j на 'accepted'.
7. Friend Service генерирует событие `friend.added` для Feed Service.
8. Feed Service добавляет событие в ленты активности пользователей А и Б.

#### 3.4.3 Поток написания отзыва

1. Пользователь отправляет отзыв к игре через REST API.
2. Review Service валидирует отзыв.
3. Отзыв сохраняется в PostgreSQL со статусом 'pending_moderation'.
4. Review Service отправляет событие для Moderation Service.
5. Модератор (через Admin Service) одобряет отзыв.
6. Moderation Service обновляет статус отзыва на 'approved'.
7. Review Service генерирует событие `review.published` для Feed Service.
8. Feed Service добавляет событие в ленту активности пользователя.

## 4. Бизнес-логика и сценарии использования

(Детальное описание бизнес-процессов и пользовательских сценариев для каждой функции: профили, друзья, группы, чаты, лента, отзывы, форумы, модерация. Аналогично другим спецификациям.)

## 5. Структура данных и API

### 5.1 Модели данных (основные)

- **UserProfile**: id, user_id (FK to Auth), nickname, avatar_url, profile_background_url, about_text, status, privacy_settings, created_at, updated_at.
- **Friendship**: user_id_1, user_id_2, status (pending, accepted, blocked), created_at, accepted_at.
- **Group**: id, name, description, owner_id, privacy_level, created_at, updated_at.
- **GroupMember**: group_id, user_id, role (admin, moderator, member), joined_at.
- **ChatMessage**: id, chat_id, sender_id, content, sent_at, read_at.
- **FeedItem**: id, user_id, type (achievement, review, friend_added, etc.), related_entity_id, content, created_at.
- **Review**: id, user_id, game_id, rating, text, status (pending, approved, rejected), created_at, updated_at.
- **Comment**: id, parent_id (для вложенности), user_id, entity_type, entity_id, text, created_at.
- **Forum**: id, group_id (optional), name, description.
- **ForumTopic**: id, forum_id, user_id, title, created_at.
- **ForumPost**: id, topic_id, user_id, content, created_at.

### 5.2 REST API

(Подробное описание эндпоинтов для каждой функции: CRUD профилей, друзей, групп, отзывов, комментариев, получение ленты, управление форумами и т.д. Использование Swagger/OpenAPI.)

- `GET /users/{userId}/profile`
- `PUT /users/me/profile`
- `GET /users/me/friends`
- `POST /users/me/friends/requests`
- `PUT /users/me/friends/requests/{requestId}`
- `DELETE /users/me/friends/{friendId}`
- `GET /groups`
- `POST /groups`
- `GET /groups/{groupId}`
- `POST /groups/{groupId}/members`
- `GET /feed`
- `POST /feed/{itemId}/like`
- `POST /feed/{itemId}/comments`
- `GET /games/{gameId}/reviews`
- `POST /games/{gameId}/reviews`
- ... и т.д.

### 5.3 gRPC API

(Описание методов для внутреннего взаимодействия: проверка статуса дружбы, получение данных профиля для других сервисов и т.д.)

- `CheckFriendship(userId1, userId2) returns (status)`
- `GetUserProfileSummary(userId) returns (ProfileSummary)`
- `BatchGetUsersProfileSummary(userIds) returns (stream ProfileSummary)`
- `SubmitModerationTask(entityType, entityId, content)`

### 5.4 WebSocket API

(Описание событий и сообщений для чатов и обновлений в реальном времени.)

- **События от сервера**: `new_message`, `message_read`, `user_status_update`, `notification`, `feed_update`.
- **Сообщения от клиента**: `send_message`, `mark_message_read`, `subscribe_chat`, `unsubscribe_chat`.

### 5.5 События (Kafka/RabbitMQ)

(Описание событий, публикуемых сервисом для асинхронного взаимодействия.)

- `user.profile.updated`
- `friend.request.sent`
- `friend.request.accepted`
- `friend.removed`
- `group.created`
- `group.member.joined`
- `chat.message.sent` (для аналитики/архивации)
- `review.submitted`
- `review.approved`
- `comment.posted`
- `moderation.required`
- `user.reported`

## 6. Интеграции с другими сервисами

(Подробное описание точек интеграции с каждым из связанных сервисов: какие данные запрашиваются, какие события отправляются/принимаются.)

- **Account Service**: Получение базовых данных пользователя (ID, email) при создании профиля. Обновление ника/аватара может инициироваться из Account Service.
- **Auth Service**: Проверка аутентификации для всех запросов API. Получение user_id из токена.
- **Library Service**: Запрос списка игр, игрового времени, достижений пользователя для отображения в профиле и генерации событий для ленты.
- **Catalog Service**: Запрос метаданных игр при отображении отзывов, обсуждений.
- **Notification Service**: Отправка событий для генерации уведомлений (новые сообщения, запросы в друзья, упоминания, лайки, комментарии).
- **Admin Service**: Предоставление интерфейсов для модерации контента. Получение команд на блокировку/разблокировку пользователей/контента.
- **Analytics Service**: Отправка событий о социальной активности для анализа.

## 7. Требования к безопасности, масштабируемости и отказоустойчивости

(Повторение и детализация нефункциональных требований из раздела 2.4 с акцентом на конкретные механизмы реализации.)

- **Безопасность**: Аутентификация/авторизация на всех API, проверка прав доступа, защита от CSRF/XSS, шифрование данных, соблюдение приватности, rate limiting.
- **Масштабируемость**: Использование масштабируемых хранилищ (Cassandra, Neo4j), асинхронная обработка, кэширование, горизонтальное масштабирование подов/контейнеров, разделение на чтение/запись (CQRS).
- **Отказоустойчивость**: Репликация баз данных, использование брокеров сообщений с гарантией доставки, механизмы повторных попыток, graceful degradation (например, временное отключение ленты при высокой нагрузке).

## 8. Реализация и развертывание

- **Язык**: Go (предпочтительно, для консистентности с другими сервисами) или другой подходящий (например, Java/Kotlin, Python).
- **Базы данных**: PostgreSQL, Cassandra, Neo4j, Redis.
- **Брокер сообщений**: Kafka или RabbitMQ.
- **WebSocket**: Библиотеки типа Gorilla WebSocket (Go), Socket.IO (Node.js) или аналоги.
- **Развертывание**: Docker, Kubernetes.
- **CI/CD**: GitLab CI / Jenkins.
- **Мониторинг**: Prometheus, Grafana.
- **Логирование**: ELK / Loki.
- **Трассировка**: OpenTelemetry / Jaeger.

## 9. Глоссарий

(Определения ключевых терминов, специфичных для Social Service: Лента активности, Социальный граф, Группа, Отзыв, Модерация и т.д.)

