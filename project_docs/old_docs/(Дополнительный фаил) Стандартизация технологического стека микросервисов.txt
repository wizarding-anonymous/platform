# Стандартизация технологического стека микросервисов

## Содержание
1. [Введение](#введение)
2. [Основной технологический стек](#основной-технологический-стек)
3. [Стандарты разработки на Go](#стандарты-разработки-на-go)
4. [Стандарты работы с PostgreSQL](#стандарты-работы-с-postgresql)
5. [Стандарты разработки на Flutter](#стандарты-разработки-на-flutter)
6. [Библиотеки и фреймворки](#библиотеки-и-фреймворки)
7. [Управление зависимостями](#управление-зависимостями)
8. [Тестирование](#тестирование)
9. [Документация](#документация)
10. [Заключение](#заключение)

## Введение

Данный документ определяет стандартизированный технологический стек для всех микросервисов российского аналога платформы Steam. Цель стандартизации — обеспечить согласованность, упростить разработку, тестирование и поддержку, а также повысить эффективность команды разработки.

Стандарты разработаны с учетом использования Go в качестве основного языка программирования для бэкенда, PostgreSQL в качестве основной базы данных и Flutter для фронтенда.

## Основной технологический стек

### Языки программирования

- **Бэкенд**: Go (версия 1.21+)
- **Фронтенд**: Dart (версия 3.0+), Flutter (версия 3.10+)
- **Скрипты**: Python (версия 3.10+), Bash

### Базы данных

- **Основная СУБД**: PostgreSQL (версия 15+)
- **Кэширование**: Redis (версия 7.0+)
- **Поиск**: Elasticsearch (версия 8.0+) или российский аналог
- **Очереди сообщений**: Kafka (версия 3.0+) или NATS (версия 2.9+)

### Инфраструктура

- **Контейнеризация**: Docker
- **Оркестрация**: Kubernetes (версия 1.25+)
- **CI/CD**: GitLab CI/CD или Jenkins
- **Мониторинг**: Prometheus + Grafana
- **Логирование**: Fluent Bit + Elasticsearch/ClickHouse + Kibana/Grafana
- **Трассировка**: OpenTelemetry + Jaeger

## Стандарты разработки на Go

### Версия Go

- Использовать Go версии 1.21 или выше.
- Обновлять версию Go не реже одного раза в год.
- Использовать одну версию Go для всех микросервисов.

### Структура проекта

- Следовать стандартной структуре Go-проекта (см. [Структура репозитория микросервиса](#структура-репозитория-микросервиса) в документе по инфраструктурным файлам).
- Использовать модули Go (go.mod) для управления зависимостями.
- Разделять код на пакеты по функциональности, а не по типам.

### Стиль кода

- Следовать официальному стилю Go (gofmt).
- Использовать линтеры (golangci-lint) с единой конфигурацией для всех проектов.
- Придерживаться принципов чистого кода и идиоматического Go.

### Обработка ошибок

- Использовать явную обработку ошибок (не игнорировать ошибки).
- Применять пакет `errors` с поддержкой стека вызовов (например, `github.com/pkg/errors`).
- Использовать типизированные ошибки для бизнес-логики.
- Логировать ошибки только в одном месте (обычно на верхнем уровне).

### Конкурентность

- Использовать горутины и каналы для конкурентного выполнения.
- Применять пакет `context` для управления отменой операций и таймаутами.
- Использовать пакет `sync` для синхронизации доступа к общим ресурсам.
- Избегать глобальных переменных для хранения состояния.

### Производительность

- Использовать пулы для повторно используемых ресурсов (соединения с БД, HTTP-клиенты).
- Применять буферизацию для операций ввода-вывода.
- Использовать профилирование для выявления узких мест.
- Оптимизировать только после измерения производительности.

## Стандарты работы с PostgreSQL

### Подключение к базе данных

- Использовать пул соединений (например, `pgxpool`).
- Настраивать параметры пула (максимальное количество соединений, время жизни соединения).
- Использовать контекст для управления таймаутами запросов.

### ORM и SQL

- Основной ORM: GORM (`github.com/go-gorm/gorm`).
- Для сложных запросов: SQL Builder (например, `github.com/Masterminds/squirrel`).
- Для прямых запросов: `github.com/jackc/pgx/v5`.
- Использовать параметризованные запросы для предотвращения SQL-инъекций.

### Миграции

- Использовать `golang-migrate/migrate` для управления миграциями.
- Хранить миграции в репозитории вместе с кодом.
- Применять миграции автоматически при деплое (через initContainer или Job).
- Тестировать миграции в CI/CD пайплайне.

### Транзакции

- Использовать транзакции для атомарных операций.
- Применять паттерн Unit of Work для управления транзакциями.
- Обрабатывать ошибки транзакций и выполнять откат при необходимости.

### Индексы и оптимизация

- Создавать индексы для часто используемых полей в запросах WHERE, JOIN, ORDER BY.
- Использовать EXPLAIN для анализа запросов.
- Применять частичные индексы для больших таблиц.
- Регулярно выполнять VACUUM и ANALYZE для оптимизации производительности.

## Стандарты разработки на Flutter

### Версия Flutter и Dart

- Использовать Flutter версии 3.10+ и Dart 3.0+.
- Обновлять версии Flutter и Dart не реже одного раза в полгода.
- Использовать одну версию Flutter для всех клиентских приложений.

### Архитектура приложения

- Использовать чистую архитектуру (Clean Architecture) с разделением на слои:
  - **Presentation**: UI-компоненты, виджеты, экраны
  - **Domain**: Бизнес-логика, модели, интерфейсы репозиториев
  - **Data**: Реализация репозиториев, источники данных (API, локальное хранилище)
- Применять принцип инверсии зависимостей (DI) с использованием `get_it` или `provider`.
- Использовать паттерн Repository для доступа к данным.

### Управление состоянием

- **Основной подход**: BLoC (Business Logic Component) с использованием пакета `flutter_bloc`.
- **Альтернативы**:
  - Riverpod (`flutter_riverpod`) для более простых случаев
  - Provider (`provider`) для простых компонентов
  - GetX (`get`) для быстрой разработки прототипов
- Избегать глобального состояния, предпочитать локальное состояние для отдельных виджетов.
- Использовать иммутабельные модели данных.

### Структура проекта

```
flutter_app/
├── android/                 # Android-специфичный код
├── ios/                     # iOS-специфичный код
├── linux/                   # Linux-специфичный код
├── macos/                   # macOS-специфичный код
├── windows/                 # Windows-специфичный код
├── web/                     # Web-специфичный код
├── lib/
│   ├── app/                 # Основные настройки приложения
│   │   ├── app.dart         # Корневой виджет приложения
│   │   ├── routes.dart      # Маршрутизация
│   │   └── theme.dart       # Темы оформления
│   ├── core/                # Общие компоненты и утилиты
│   │   ├── constants/       # Константы
│   │   ├── errors/          # Обработка ошибок
│   │   ├── network/         # Сетевой слой
│   │   └── utils/           # Утилиты
│   ├── data/                # Слой данных
│   │   ├── datasources/     # Источники данных (API, локальное хранилище)
│   │   ├── models/          # Модели данных
│   │   └── repositories/    # Реализации репозиториев
│   ├── domain/              # Слой бизнес-логики
│   │   ├── entities/        # Бизнес-сущности
│   │   ├── repositories/    # Интерфейсы репозиториев
│   │   └── usecases/        # Сценарии использования
│   ├── presentation/        # Слой представления
│   │   ├── blocs/           # BLoC-компоненты
│   │   ├── pages/           # Страницы приложения
│   │   └── widgets/         # Переиспользуемые виджеты
│   ├── di/                  # Внедрение зависимостей
│   │   └── service_locator.dart
│   └── main.dart            # Точка входа
├── test/                    # Тесты
│   ├── unit/                # Модульные тесты
│   ├── widget/              # Тесты виджетов
│   └── integration/         # Интеграционные тесты
├── pubspec.yaml             # Зависимости и метаданные
└── README.md
```

### Стиль кода

- Следовать официальному стилю Dart (dartfmt).
- Использовать линтеры (dart_code_metrics, flutter_lints) с единой конфигурацией.
- Придерживаться принципов чистого кода и идиоматического Dart.
- Использовать `analysis_options.yaml` для настройки анализатора кода.

### Работа с API

- Использовать `dio` или `http` для HTTP-запросов.
- Применять перехватчики (interceptors) для обработки ошибок, аутентификации и логирования.
- Использовать модели для сериализации/десериализации JSON.
- Применять генерацию кода для моделей с помощью `json_serializable` или `freezed`.
- Обрабатывать ошибки сети и возвращать типизированные ошибки.

### Кэширование и локальное хранение

- Использовать `shared_preferences` для простых настроек.
- Применять `hive` или `sqflite` для локального хранения данных.
- Использовать `flutter_secure_storage` для хранения чувствительных данных.
- Реализовать стратегию кэширования для работы в оффлайн-режиме.

### Локализация

- Использовать `flutter_localizations` и `intl` для локализации.
- Хранить строки в ARB-файлах.
- Применять генерацию кода для локализованных строк.
- Поддерживать как минимум русский и английский языки.

### Навигация

- Использовать `go_router` или `auto_route` для навигации.
- Применять именованные маршруты.
- Использовать вложенную навигацию для сложных потоков.
- Обрабатывать deep links для интеграции с внешними приложениями.

### Оптимизация производительности

- Использовать `const` конструкторы для неизменяемых виджетов.
- Применять `ListView.builder` и `GridView.builder` для больших списков.
- Использовать кэширование изображений с помощью `cached_network_image`.
- Применять `compute` для тяжелых вычислений в отдельном изоляте.
- Использовать инструменты профилирования Flutter для выявления проблем с производительностью.

### Особенности десктопной разработки

- Использовать адаптивный дизайн для поддержки различных размеров экрана.
- Применять десктоп-специфичные виджеты и взаимодействия (меню, контекстные меню, горячие клавиши).
- Оптимизировать для работы с мышью и клавиатурой.
- Использовать `flutter_acrylic` или аналоги для нативных эффектов окон.
- Реализовать поддержку перетаскивания файлов (drag and drop).

## Библиотеки и фреймворки

### HTTP-сервер (Go)

- **Основной фреймворк**: Echo (`github.com/labstack/echo/v4`)
- **Альтернативы**: 
  - Gin (`github.com/gin-gonic/gin`) для простых API
  - Chi (`github.com/go-chi/chi/v5`) для более гибкой маршрутизации
  - Fiber (`github.com/gofiber/fiber/v2`) для высокопроизводительных API

### gRPC (Go)

- **Основная библиотека**: `google.golang.org/grpc`
- **Генерация кода**: `google.golang.org/protobuf` и `google.golang.org/grpc/cmd/protoc-gen-go-grpc`
- **Валидация**: `github.com/envoyproxy/protoc-gen-validate`
- **Документация**: `github.com/pseudomuto/protoc-gen-doc`

### Работа с базами данных (Go)

- **PostgreSQL**: 
  - ORM: `github.com/go-gorm/gorm`
  - Драйвер: `github.com/jackc/pgx/v5`
  - Миграции: `github.com/golang-migrate/migrate`
- **Redis**: 
  - Клиент: `github.com/redis/go-redis/v9`
  - Кэширование: `github.com/go-redis/cache/v9`
- **Kafka**: 
  - Клиент: `github.com/segmentio/kafka-go`
  - Обработка событий: `github.com/ThreeDotsLabs/watermill-kafka`
- **NATS**: 
  - Клиент: `github.com/nats-io/nats.go`
  - JetStream: `github.com/nats-io/nats.go/jetstream`

### Конфигурация (Go)

- **Основная библиотека**: `github.com/spf13/viper`
- **Переменные окружения**: `github.com/joho/godotenv` (для локальной разработки)
- **Флаги командной строки**: `github.com/spf13/cobra`

### Логирование (Go)

- **Основная библиотека**: `github.com/uber-go/zap`
- **Структурированное логирование**: JSON-формат
- **Контекстное логирование**: `github.com/uber-go/zap/zapcore`

### Трассировка и метрики (Go)

- **OpenTelemetry**: `go.opentelemetry.io/otel`
- **Prometheus**: `github.com/prometheus/client_golang`
- **Интеграция с базами данных**: `github.com/uptrace/opentelemetry-go-extra/otelgorm`

### Валидация (Go)

- **Основная библиотека**: `github.com/go-playground/validator/v10`
- **Интеграция с Echo**: `github.com/go-playground/validator/v10/non-standard/validators`

### Авторизация и аутентификация (Go)

- **JWT**: `github.com/golang-jwt/jwt/v5`
- **OAuth2**: `golang.org/x/oauth2`
- **RBAC**: `github.com/casbin/casbin/v2`

### Основные библиотеки Flutter

- **Управление состоянием**:
  - `flutter_bloc`: Для реализации BLoC-паттерна
  - `provider`: Для внедрения зависимостей и простого управления состоянием
  - `riverpod`: Для более продвинутого управления состоянием
  - `get_it`: Для внедрения зависимостей

- **Сетевое взаимодействие**:
  - `dio`: HTTP-клиент с расширенными возможностями
  - `retrofit`: Генерация REST API клиента
  - `grpc`: Для gRPC-взаимодействия
  - `web_socket_channel`: Для WebSocket-соединений

- **Локальное хранение**:
  - `hive`: NoSQL база данных
  - `sqflite`: SQLite для Flutter
  - `shared_preferences`: Хранение простых настроек
  - `flutter_secure_storage`: Безопасное хранение чувствительных данных

- **Навигация**:
  - `go_router`: Декларативная навигация
  - `auto_route`: Навигация с генерацией кода

- **UI-компоненты**:
  - `flutter_screenutil`: Адаптивный UI для разных размеров экрана
  - `cached_network_image`: Кэширование изображений
  - `flutter_svg`: Поддержка SVG
  - `shimmer`: Эффекты загрузки
  - `flutter_platform_widgets`: Платформо-специфичные виджеты

- **Аналитика и мониторинг**:
  - `firebase_crashlytics`: Отслеживание сбоев
  - `sentry_flutter`: Мониторинг ошибок
  - `flutter_fimber`: Логирование

- **Тестирование**:
  - `mockito`: Создание моков
  - `bloc_test`: Тестирование BLoC
  - `integration_test`: Интеграционное тестирование

### Тестирование (Go)

- **Основная библиотека**: стандартная библиотека `testing`
- **Моки**: `github.com/stretchr/testify/mock`
- **Ассерты**: `github.com/stretchr/testify/assert`
- **HTTP-тесты**: `net/http/httptest`
- **Интеграционные тесты**: `github.com/testcontainers/testcontainers-go`

## Управление зависимостями

### Версионирование

- Использовать семантическое версионирование (SemVer) для всех компонентов.
- Фиксировать версии зависимостей в go.mod и pubspec.yaml.
- Регулярно обновлять зависимости и проверять их на уязвимости.

### Внутренние библиотеки

- Создавать общие библиотеки для повторно используемого кода.
- Хранить внутренние библиотеки в отдельных репозиториях.
- Версионировать внутренние библиотеки так же, как внешние.

### Управление вендорами (Go)

- Использовать `go mod vendor` для создания локальной копии зависимостей (при необходимости).
- Включать вендоры в .gitignore (за исключением особых случаев).
- Использовать прокси для Go модулей (например, `GOPROXY=https://proxy.golang.org,direct`).

### Управление пакетами (Flutter)

- Использовать `pub get` для установки зависимостей.
- Регулярно обновлять зависимости с помощью `pub upgrade`.
- Использовать `pub outdated` для проверки устаревших зависимостей.
- Предпочитать стабильные версии пакетов вместо dev или beta.

## Тестирование

### Модульные тесты (Go)

- Писать тесты для всех публичных функций и методов.
- Использовать таблично-управляемые тесты для проверки различных сценариев.
- Применять моки для изоляции тестируемого кода от внешних зависимостей.
- Стремиться к покрытию кода тестами не менее 80%.

### Интеграционные тесты (Go)

- Использовать testcontainers для запуска зависимостей (БД, Redis, Kafka).
- Тестировать взаимодействие с реальными внешними системами.
- Изолировать тесты друг от друга (каждый тест должен начинаться с чистого состояния).

### Нагрузочные тесты (Go)

- Использовать k6 (`github.com/grafana/k6`) для нагрузочного тестирования API.
- Определять SLO (Service Level Objectives) для каждого сервиса.
- Включать нагрузочные тесты в CI/CD пайплайн для критичных сервисов.

### Тестирование Flutter

- **Модульные тесты**: Тестирование отдельных классов и функций.
- **Виджет-тесты**: Тестирование отдельных виджетов.
- **Интеграционные тесты**: Тестирование взаимодействия между компонентами.
- **Скриншот-тесты**: Сравнение визуального представления виджетов с эталонными изображениями.
- **Тестирование производительности**: Измерение времени отрисовки и использования ресурсов.

### Тестирование в CI/CD

- Запускать все тесты в CI/CD пайплайне.
- Блокировать мерж-реквесты при падении тестов.
- Генерировать отчеты о покрытии кода тестами.
- Использовать матрицы тестирования для проверки на разных версиях Go, Flutter и зависимостей.

## Документация

### Документация кода (Go)

- Документировать все публичные функции, методы и типы.
- Следовать стандартам godoc.
- Включать примеры использования для сложных API.
- Генерировать документацию с помощью `go doc` или `godoc`.

### Документация кода (Flutter)

- Документировать все публичные классы, методы и функции.
- Следовать стандартам dartdoc.
- Включать примеры использования для сложных виджетов и классов.
- Генерировать документацию с помощью `dart doc`.

### API-документация

- Использовать OpenAPI (Swagger) для REST API.
- Использовать protoc-gen-doc для gRPC API.
- Хранить документацию API в репозитории вместе с кодом.
- Автоматически генерировать документацию при изменении API.

### Документация для разработчиков

- Создавать README.md с инструкциями по установке, настройке и запуску.
- Документировать архитектуру и основные компоненты.
- Описывать процесс разработки, тестирования и деплоя.
- Обновлять документацию при изменении кода.

## Заключение

Стандартизация технологического стека является ключевым фактором для построения согласованной и эффективной микросервисной платформы. Использование единых библиотек, фреймворков и подходов упрощает разработку, тестирование и поддержку системы. Выбор Flutter для фронтенда обеспечивает кроссплатформенность, высокую производительность и единую кодовую базу для всех клиентских приложений, что идеально подходит для игровой платформы.

Следование данным стандартам позволит обеспечить высокое качество кода, производительность и масштабируемость для всех компонентов российского аналога платформы Steam.

Важно регулярно пересматривать и обновлять эти стандарты в соответствии с изменениями в технологиях, появлением новых библиотек и фреймворков, а также на основе опыта разработки и эксплуатации системы.
