# Спецификация микросервиса Download Service

## Содержание

1. [Введение](#1-введение)
2. [Требования и цели](#2-требования-и-цели)
3. [Архитектура](#3-архитектура)
4. [Бизнес-логика и сценарии использования](#4-бизнес-логика-и-сценарии-использования)
5. [Структура данных и API](#5-структура-данных-и-api)
6. [Интеграции с другими сервисами](#6-интеграции-с-другими-сервисами)
7. [Требования к безопасности, масштабируемости и отказоустойчивости](#7-требования-к-безопасности-масштабируемости-и-отказоустойчивости)
8. [Реализация и развертывание](#8-реализация-и-развертывание)
9. [Глоссарий](#9-глоссарий)

## 1. Введение

### 1.1 Назначение документа

Данный документ представляет собой полную спецификацию микросервиса Download Service для российского аналога платформы Steam. Документ содержит детальное описание требований, архитектуры, бизнес-логики, API, интеграций и нефункциональных требований, необходимых для полной реализации микросервиса.

### 1.2 Область применения

Download Service является критически важным компонентом платформы, отвечающим за загрузку, обновление и установку игр на устройства пользователей. Сервис обеспечивает надежную и эффективную доставку игрового контента конечным пользователям, управление обновлениями и проверку целостности файлов.

### 1.3 Связь с другими микросервисами

Download Service взаимодействует со следующими микросервисами платформы:

- **Catalog Service** - для получения метаданных игр и информации об обновлениях
- **Library Service** - для проверки прав доступа и обновления статуса установки
- **Auth Service** - для аутентификации и авторизации пользователей
- **Account Service** - для получения и обновления настроек загрузки

## 2. Требования и цели

### 2.1 Назначение сервиса

Download Service предназначен для управления загрузкой, обновлением и установкой игр на устройства пользователей в рамках российского аналога Steam. Сервис является критически важным компонентом платформы, обеспечивающим основной функционал доставки игрового контента конечным пользователям.

### 2.2 Основные цели

1. Обеспечение надежного и эффективного механизма загрузки игровых файлов
2. Управление процессом обновления игр и клиентского приложения
3. Оптимизация использования сетевых ресурсов при загрузке контента
4. Обеспечение целостности и безопасности загружаемых файлов
5. Предоставление пользователям информации о статусе и прогрессе загрузок
6. Интеграция с CDN для распределения нагрузки и оптимизации скорости загрузки

### 2.3 Функциональные требования

#### 2.3.1 Управление загрузками игр

- Инициирование загрузки игры по запросу пользователя
- Возможность приостановки и возобновления загрузки
- Отмена текущей загрузки
- Управление очередью загрузок с возможностью приоритизации
- Возобновление прерванных загрузок с точки остановки
- Поддержка параллельных загрузок с ограничением по количеству

#### 2.3.2 Управление обновлениями игр

- Проверка наличия обновлений для установленных игр
- Автоматическое или ручное обновление игр
- Поддержка дифференциальных (дельта) обновлений
- Откат обновлений в случае ошибок
- Планирование обновлений на определенное время

#### 2.3.3 Управление клиентским приложением

- Обновление клиентского приложения платформы
- Автоматическая проверка версии клиента
- Принудительное обновление при критических изменениях
- Поддержка различных каналов обновлений (стабильный, бета, тестовый)

#### 2.3.4 Проверка целостности

- Верификация загруженных файлов с использованием хеш-сумм
- Автоматическое исправление поврежденных файлов
- Полная проверка целостности установленной игры
- Логирование и отчетность о проблемах целостности

#### 2.3.5 Мониторинг и статистика

- Отслеживание прогресса загрузки в реальном времени
- Сбор статистики о скорости загрузки
- Анализ производительности CDN
- Мониторинг использования сетевых ресурсов
- Сбор данных о популярности загрузок

### 2.4 Нефункциональные требования

#### 2.4.1 Производительность

- Поддержка высокой пропускной способности для одновременных загрузок
- Оптимизация использования сетевых ресурсов
- Минимизация задержек при инициировании загрузок
- Эффективное использование дискового пространства для кэширования

#### 2.4.2 Масштабируемость

- Горизонтальное масштабирование для обработки пиковых нагрузок
- Балансировка нагрузки между CDN
- Адаптация к различным объемам трафика

#### 2.4.3 Надежность

- Устойчивость к сетевым сбоям
- Автоматическое восстановление после ошибок
- Резервное копирование метаданных загрузок
- Отказоустойчивость при недоступности отдельных CDN

#### 2.4.4 Безопасность

- Защита от несанкционированного доступа к файлам игр
- Проверка прав доступа пользователя к контенту
- Защита от подмены контента
- Шифрование передаваемых данных

## 3. Архитектура

### 3.1 Общая архитектура

Download Service построен на основе многослойной архитектуры, соответствующей паттернам, используемым в других микросервисах платформы (Auth, Catalog, Library, Account). Архитектура обеспечивает четкое разделение ответственности, масштабируемость и поддержку высоких нагрузок.

#### 3.1.1 Архитектурные слои

1. **Транспортный слой** (Transport Layer)
   - REST API для взаимодействия с клиентским приложением
   - gRPC API для взаимодействия с другими микросервисами
   - WebSocket для отслеживания прогресса загрузки в реальном времени

2. **Сервисный слой** (Service Layer)
   - Реализация бизнес-логики
   - Оркестрация взаимодействия между компонентами
   - Обработка бизнес-правил и валидация

3. **Репозиторный слой** (Repository Layer)
   - Взаимодействие с базами данных
   - Кэширование данных
   - Абстракция доступа к данным

4. **Инфраструктурный слой** (Infrastructure Layer)
   - Взаимодействие с CDN
   - Управление очередями загрузок
   - Мониторинг и метрики
   - Логирование и трассировка

#### 3.1.2 Структура проекта

```
download-service/
├── api/                      # API определения
│   ├── grpc/                 # gRPC протобуфы
│   │   └── proto/            # Протофайлы
│   └── rest/                 # Swagger/OpenAPI спецификации
├── cmd/                      # Точки входа в приложение
│   └── server/               # Запуск сервера
├── configs/                  # Конфигурационные файлы
├── internal/                 # Внутренний код приложения
│   ├── domain/               # Доменные модели
│   ├── pkg/                  # Внутренние пакеты
│   │   ├── cdn/              # Взаимодействие с CDN
│   │   ├── delta/            # Обработка дельта-обновлений
│   │   ├── hash/             # Проверка хешей файлов
│   │   ├── logger/           # Логирование
│   │   ├── metrics/          # Метрики и мониторинг
│   │   ├── queue/            # Управление очередями
│   │   └── trace/            # Трассировка
│   ├── repository/           # Репозитории для доступа к данным
│   │   ├── postgres/         # Репозитории PostgreSQL
│   │   └── redis/            # Репозитории Redis
│   ├── service/              # Сервисные слои
│   │   ├── download/         # Сервис загрузок
│   │   ├── update/           # Сервис обновлений
│   │   ├── client/           # Сервис клиентского приложения
│   │   └── verify/           # Сервис проверки целостности
│   └── transport/            # Транспортные слои
│       ├── grpc/             # gRPC обработчики
│       ├── rest/             # REST обработчики
│       └── websocket/        # WebSocket обработчики
├── migrations/               # Миграции базы данных
├── scripts/                  # Скрипты для разработки и деплоя
└── test/                     # Тесты
    ├── integration/          # Интеграционные тесты
    └── unit/                 # Модульные тесты
```

### 3.2 Компоненты системы

#### 3.2.1 Компонент управления загрузками (Download Manager)

**Назначение**: Управление процессом загрузки игровых файлов.

**Ключевые функции**:
- Инициализация загрузки
- Управление очередью загрузок
- Приостановка/возобновление загрузок
- Отслеживание прогресса
- Обработка ошибок загрузки

**Взаимодействие**:
- Использует CDN Client для получения файлов
- Взаимодействует с Queue Manager для управления очередью
- Обновляет статус загрузки в базе данных через репозитории

#### 3.2.2 Компонент управления обновлениями (Update Manager)

**Назначение**: Управление обновлениями игр и клиентского приложения.

**Ключевые функции**:
- Проверка наличия обновлений
- Создание дельта-патчей
- Применение обновлений
- Откат обновлений при ошибках

**Взаимодействие**:
- Получает информацию о версиях от Catalog Service
- Использует Delta Processor для создания и применения патчей
- Взаимодействует с Download Manager для загрузки обновлений

#### 3.2.3 Компонент проверки целостности (Integrity Checker)

**Назначение**: Проверка целостности загруженных файлов.

**Ключевые функции**:
- Вычисление хеш-сумм файлов
- Сравнение с эталонными хешами
- Выявление поврежденных файлов
- Инициирование повторной загрузки поврежденных файлов

**Взаимодействие**:
- Получает эталонные хеши от Catalog Service
- Взаимодействует с Download Manager для повторной загрузки

#### 3.2.4 Компонент взаимодействия с CDN (CDN Client)

**Назначение**: Взаимодействие с сетью доставки контента.

**Ключевые функции**:
- Выбор оптимального CDN-сервера
- Загрузка файлов с CDN
- Мониторинг производительности CDN
- Обработка ошибок CDN

**Взаимодействие**:
- Взаимодействует с внешними CDN-серверами
- Предоставляет интерфейс для Download Manager

#### 3.2.5 Компонент управления очередями (Queue Manager)

**Назначение**: Управление очередями загрузок и обновлений.

**Ключевые функции**:
- Приоритизация загрузок
- Ограничение параллельных загрузок
- Планирование загрузок
- Управление ресурсами

**Взаимодействие**:
- Взаимодействует с Download Manager
- Использует Redis для хранения очередей

#### 3.2.6 Компонент обработки дельта-обновлений (Delta Processor)

**Назначение**: Создание и применение дельта-патчей.

**Ключевые функции**:
- Создание дельта-патчей между версиями
- Применение дельта-патчей
- Оптимизация размера патчей
- Проверка целостности после применения патчей

**Взаимодействие**:
- Взаимодействует с Update Manager
- Использует Integrity Checker для проверки результатов

### 3.3 Хранилища данных

#### 3.3.1 PostgreSQL

**Назначение**: Основное хранилище метаданных загрузок и обновлений.

**Хранимые данные**:
- Метаданные файлов (пути, хеши, версии)
- История загрузок и обновлений
- Информация о дельта-обновлениях
- Статистика загрузок

**Таблицы**:
- `downloads` - информация о загрузках
- `download_items` - элементы загрузки (файлы)
- `updates` - информация об обновлениях
- `update_items` - элементы обновления
- `file_metadata` - метаданные файлов
- `cdn_performance` - статистика производительности CDN

#### 3.3.2 Redis

**Назначение**: Кэширование и управление очередями.

**Хранимые данные**:
- Очереди загрузок
- Статусы текущих загрузок
- Кэш метаданных часто используемых файлов
- Временные токены доступа к CDN

**Структуры данных**:
- Списки для очередей загрузок
- Хеш-таблицы для статусов загрузок
- Отсортированные множества для приоритизации

### 3.4 Потоки данных

#### 3.4.1 Поток инициирования загрузки

1. Клиент отправляет запрос на загрузку игры через REST API
2. Download Service проверяет права доступа через Library Service
3. Download Service получает метаданные игры от Catalog Service
4. Queue Manager добавляет загрузку в очередь с соответствующим приоритетом
5. Download Manager инициирует загрузку файлов с CDN
6. Статус загрузки обновляется в реальном времени через WebSocket
7. После завершения загрузки Integrity Checker проверяет целостность файлов
8. Library Service обновляет статус установки в библиотеке пользователя

#### 3.4.2 Поток обновления игры

1. Update Manager периодически проверяет наличие обновлений через Catalog Service
2. При обнаружении обновления пользователю отправляется уведомление
3. Пользователь подтверждает обновление через клиентское приложение
4. Delta Processor определяет необходимые изменения
5. Download Manager загружает только измененные файлы
6. Delta Processor применяет патчи к существующим файлам
7. Integrity Checker проверяет целостность обновленных файлов
8. Library Service обновляет информацию о версии в библиотеке пользователя

#### 3.4.3 Поток проверки целостности

1. Пользователь инициирует проверку целостности игры
2. Integrity Checker получает эталонные хеши от Catalog Service
3. Integrity Checker вычисляет хеши локальных файлов
4. При обнаружении несоответствий формируется список поврежденных файлов
5. Download Manager инициирует повторную загрузку поврежденных файлов
6. После завершения загрузки повторно проверяется целостность

## 4. Бизнес-логика и сценарии использования

### 4.1 Основные бизнес-процессы

#### 4.1.1 Загрузка игры

**Описание**: Процесс загрузки игры из каталога на устройство пользователя.

**Бизнес-правила**:
- Пользователь должен иметь доступ к игре в своей библиотеке
- Система должна проверять наличие свободного места на устройстве
- Загрузка должна возобновляться с места прерывания при сбоях
- Система должна оптимизировать использование сетевых ресурсов
- После загрузки должна выполняться проверка целостности файлов

**Метрики**:
- Время загрузки
- Процент успешных загрузок
- Эффективность использования полосы пропускания

#### 4.1.2 Обновление игры

**Описание**: Процесс обновления уже установленной игры до новой версии.

**Бизнес-правила**:
- Система должна минимизировать объем загружаемых данных (дельта-обновления)
- Обновление не должно повреждать существующие сохранения игры
- Пользователь должен иметь возможность отложить обновление
- Критические обновления могут быть обязательными
- Должна быть возможность отката к предыдущей версии

**Метрики**:
- Время обновления
- Размер обновления относительно полной версии
- Процент успешных обновлений

#### 4.1.3 Проверка целостности

**Описание**: Процесс проверки и восстановления целостности файлов игры.

**Бизнес-правила**:
- Проверка должна выполняться автоматически после загрузки/обновления
- Пользователь должен иметь возможность инициировать проверку вручную
- Система должна автоматически восстанавливать поврежденные файлы
- Проверка должна минимально влиять на производительность системы

**Метрики**:
- Время проверки
- Процент обнаруженных и исправленных проблем
- Частота возникновения проблем целостности

#### 4.1.4 Управление очередью загрузок

**Описание**: Процесс управления множественными загрузками и их приоритизации.

**Бизнес-правила**:
- Пользователь должен иметь возможность управлять очередью загрузок
- Система должна оптимально распределять ресурсы между загрузками
- Приоритет должен учитывать тип контента и действия пользователя
- Система должна ограничивать количество одновременных загрузок

**Метрики**:
- Эффективность использования ресурсов
- Время ожидания в очереди
- Удовлетворенность пользователей

### 4.2 Пользовательские сценарии

#### 4.2.1 Загрузка новой игры

**Участники**: Пользователь, Клиентское приложение, Download Service, Library Service, Catalog Service

**Предусловия**:
- Пользователь авторизован в системе
- Игра присутствует в библиотеке пользователя
- На устройстве достаточно свободного места

**Основной поток**:
1. Пользователь выбирает игру в своей библиотеке и нажимает "Загрузить"
2. Клиентское приложение отправляет запрос в Download Service
3. Download Service проверяет права доступа через Library Service
4. Download Service получает метаданные игры от Catalog Service
5. Download Service создает задачу загрузки и добавляет ее в очередь
6. Клиентское приложение отображает прогресс загрузки
7. Download Service загружает файлы игры с CDN
8. После завершения загрузки выполняется проверка целостности
9. Download Service обновляет статус игры в Library Service
10. Клиентское приложение уведомляет пользователя о завершении загрузки

**Альтернативные потоки**:
- Если проверка прав доступа не пройдена, пользователю отображается сообщение об ошибке
- Если на устройстве недостаточно места, загрузка не начинается, и пользователь получает уведомление
- Если загрузка прерывается, система сохраняет прогресс и предлагает возобновить позже

**Постусловия**:
- Игра загружена на устройство пользователя
- Статус игры в библиотеке обновлен на "Установлена"
- Система готова к запуску игры

#### 4.2.2 Обновление установленной игры

**Участники**: Пользователь, Клиентское приложение, Download Service, Catalog Service

**Предусловия**:
- Пользователь авторизован в системе
- Игра установлена на устройстве пользователя
- Доступна новая версия игры

**Основной поток**:
1. Система обнаруживает наличие обновления для игры
2. Пользователь получает уведомление о доступном обновлении
3. Пользователь подтверждает обновление
4. Download Service получает информацию об обновлении от Catalog Service
5. Download Service определяет необходимые изменения (дельта-патч)
6. Download Service загружает только измененные файлы
7. Система применяет обновления к установленной игре
8. Выполняется проверка целостности обновленных файлов
9. Клиентское приложение уведомляет пользователя о завершении обновления

**Альтернативные потоки**:
- Если пользователь отклоняет обновление, система может напомнить позже
- Если обновление критическое, система может блокировать запуск игры до обновления
- Если применение обновления завершается с ошибкой, система выполняет откат к предыдущей версии

**Постусловия**:
- Игра обновлена до последней версии
- Информация о версии в библиотеке обновлена
- Сохранения игры остаются доступными

#### 4.2.3 Ручная проверка целостности игры

**Участники**: Пользователь, Клиентское приложение, Download Service, Catalog Service

**Предусловия**:
- Пользователь авторизован в системе
- Игра установлена на устройстве пользователя

**Основной поток**:
1. Пользователь выбирает игру и инициирует проверку целостности
2. Клиентское приложение отправляет запрос в Download Service
3. Download Service получает эталонные хеши файлов от Catalog Service
4. Download Service вычисляет хеши локальных файлов
5. Система сравнивает вычисленные хеши с эталонными
6. При обнаружении несоответствий система формирует список поврежденных файлов
7. Download Service загружает поврежденные файлы заново
8. Клиентское приложение отображает результаты проверки пользователю

**Альтернативные потоки**:
- Если все файлы в порядке, пользователь получает соответствующее уведомление
- Если повреждения критичны и не могут быть исправлены, система предлагает полную переустановку

**Постусловия**:
- Целостность файлов игры проверена и восстановлена при необходимости
- Пользователь информирован о результатах проверки

### 4.3 Системные сценарии

#### 4.3.1 Автоматическое обнаружение обновлений

**Участники**: Download Service, Catalog Service, Notification Service

**Предусловия**:
- Система функционирует нормально
- Пользователи имеют установленные игры

**Основной поток**:
1. Download Service периодически опрашивает Catalog Service на наличие обновлений
2. Catalog Service предоставляет информацию о новых версиях игр
3. Download Service сравнивает версии с установленными у пользователей
4. При обнаружении новых версий система создает задачи обновления
5. Notification Service отправляет уведомления пользователям
6. Система планирует обновления в соответствии с настройками пользователей

**Альтернативные потоки**:
- Если обновление критическое, система может инициировать немедленную загрузку
- Если пользователь отключил автоматические обновления, система только уведомляет о наличии обновления

**Постусловия**:
- Пользователи информированы о доступных обновлениях
- Обновления запланированы в соответствии с настройками

#### 4.3.2 Оптимизация использования CDN

**Участники**: Download Service, CDN система

**Предусловия**:
- Система имеет доступ к нескольким CDN
- Существуют метрики производительности CDN

**Основной поток**:
1. Download Service собирает статистику производительности различных CDN
2. Система анализирует географическое расположение пользователей
3. Download Service определяет оптимальный CDN для каждого пользователя
4. При инициировании загрузки система выбирает наиболее подходящий CDN
5. Система мониторит производительность во время загрузки
6. При деградации производительности система переключается на альтернативный CDN

**Альтернативные потоки**:
- Если все CDN показывают низкую производительность, система может временно ограничить скорость загрузки
- Если определенный CDN недоступен, система автоматически исключает его из ротации

**Постусловия**:
- Загрузки выполняются через оптимальные CDN
- Система имеет актуальные данные о производительности CDN

## 5. Структура данных и API

### 5.1 Модели данных

#### 5.1.1 Основные сущности

##### Download (Загрузка)

```go
type Download struct {
    ID            string       `json:"id" db:"id"`
    UserID        string       `json:"user_id" db:"user_id"`
    GameID        string       `json:"game_id" db:"game_id"`
    Status        DownloadStatus `json:"status" db:"status"`
    Progress      float64      `json:"progress" db:"progress"`
    CurrentSpeed  int64        `json:"current_speed" db:"current_speed"`
    AverageSpeed  int64        `json:"average_speed" db:"average_speed"`
    TotalSize     int64        `json:"total_size" db:"total_size"`
    DownloadedSize int64       `json:"downloaded_size" db:"downloaded_size"`
    Priority      int          `json:"priority" db:"priority"`
    CreatedAt     time.Time    `json:"created_at" db:"created_at"`
    UpdatedAt     time.Time    `json:"updated_at" db:"updated_at"`
    CompletedAt   *time.Time   `json:"completed_at" db:"completed_at"`
    EstimatedTimeLeft int64    `json:"estimated_time_left" db:"estimated_time_left"`
    Items         []DownloadItem `json:"items,omitempty" db:"-"`
}

type DownloadStatus string

const (
    DownloadStatusQueued     DownloadStatus = "queued"
    DownloadStatusPreparing  DownloadStatus = "preparing"
    DownloadStatusDownloading DownloadStatus = "downloading"
    DownloadStatusPaused     DownloadStatus = "paused"
    DownloadStatusCompleted  DownloadStatus = "completed"
    DownloadStatusFailed     DownloadStatus = "failed"
    DownloadStatusCancelled  DownloadStatus = "cancelled"
    DownloadStatusVerifying  DownloadStatus = "verifying"
)
```

##### DownloadItem (Элемент загрузки)

```go
type DownloadItem struct {
    ID            string       `json:"id" db:"id"`
    DownloadID    string       `json:"download_id" db:"download_id"`
    FileID        string       `json:"file_id" db:"file_id"`
    FileName      string       `json:"file_name" db:"file_name"`
    FilePath      string       `json:"file_path" db:"file_path"`
    FileSize      int64        `json:"file_size" db:"file_size"`
    FileHash      string       `json:"file_hash" db:"file_hash"`
    Status        ItemStatus   `json:"status" db:"status"`
    Progress      float64      `json:"progress" db:"progress"`
    Priority      int          `json:"priority" db:"priority"`
    DownloadedSize int64       `json:"downloaded_size" db:"downloaded_size"`
    CreatedAt     time.Time    `json:"created_at" db:"created_at"`
    UpdatedAt     time.Time    `json:"updated_at" db:"updated_at"`
    CompletedAt   *time.Time   `json:"completed_at" db:"completed_at"`
    RetryCount    int          `json:"retry_count" db:"retry_count"`
    CDNSource     string       `json:"cdn_source" db:"cdn_source"`
}
```

##### Update (Обновление)

```go
type Update struct {
    ID            string       `json:"id" db:"id"`
    GameID        string       `json:"game_id" db:"game_id"`
    FromVersion   string       `json:"from_version" db:"from_version"`
    ToVersion     string       `json:"to_version" db:"to_version"`
    UpdateType    UpdateType   `json:"update_type" db:"update_type"`
    IsCritical    bool         `json:"is_critical" db:"is_critical"`
    TotalSize     int64        `json:"total_size" db:"total_size"`
    DeltaSize     int64        `json:"delta_size" db:"delta_size"`
    ReleaseNotes  string       `json:"release_notes" db:"release_notes"`
    CreatedAt     time.Time    `json:"created_at" db:"created_at"`
    PublishedAt   time.Time    `json:"published_at" db:"published_at"`
    Items         []UpdateItem `json:"items,omitempty" db:"-"`
}
```

##### FileMetadata (Метаданные файла)

```go
type FileMetadata struct {
    ID            string       `json:"id" db:"id"`
    GameID        string       `json:"game_id" db:"game_id"`
    FileName      string       `json:"file_name" db:"file_name"`
    FilePath      string       `json:"file_path" db:"file_path"`
    FileSize      int64        `json:"file_size" db:"file_size"`
    FileHash      string       `json:"file_hash" db:"file_hash"`
    Version       string       `json:"version" db:"version"`
    IsExecutable  bool         `json:"is_executable" db:"is_executable"`
    IsOptional    bool         `json:"is_optional" db:"is_optional"`
    CDNLocations  []CDNLocation `json:"cdn_locations,omitempty" db:"-"`
    CreatedAt     time.Time    `json:"created_at" db:"created_at"`
    UpdatedAt     time.Time    `json:"updated_at" db:"updated_at"`
}
```

##### VerificationResult (Результат проверки)

```go
type VerificationResult struct {
    ID            string       `json:"id" db:"id"`
    UserID        string       `json:"user_id" db:"user_id"`
    GameID        string       `json:"game_id" db:"game_id"`
    Status        VerificationStatus `json:"status" db:"status"`
    StartedAt     time.Time    `json:"started_at" db:"started_at"`
    CompletedAt   *time.Time   `json:"completed_at" db:"completed_at"`
    TotalFiles    int          `json:"total_files" db:"total_files"`
    VerifiedFiles int          `json:"verified_files" db:"verified_files"`
    CorruptedFiles int         `json:"corrupted_files" db:"corrupted_files"`
    MissingFiles  int          `json:"missing_files" db:"missing_files"`
    Issues        []VerificationIssue `json:"issues,omitempty" db:"-"`
}
```

### 5.2 Схема базы данных

#### 5.2.1 PostgreSQL

Основные таблицы:
- `downloads` - информация о загрузках
- `download_items` - элементы загрузки (файлы)
- `updates` - информация об обновлениях
- `update_items` - элементы обновления
- `file_metadata` - метаданные файлов
- `cdn_performance` - статистика производительности CDN
- `verification_results` - результаты проверки целостности
- `verification_issues` - проблемы, обнаруженные при проверке
- `download_settings` - настройки загрузки пользователей
- `bandwidth_schedule` - расписание ограничений пропускной способности

#### 5.2.2 Redis

Основные структуры данных:
- Очереди загрузок (`download_queue:{priority}`)
- Статусы текущих загрузок (`download_status:{download_id}`)
- Статусы элементов загрузки (`download_item_status:{item_id}`)
- Кэш метаданных файлов (`file_metadata:{file_id}`)
- Временные токены доступа к CDN (`cdn_token:{file_id}:{user_id}`)
- Счетчики активных загрузок пользователя (`active_downloads:{user_id}`)

### 5.3 REST API (для клиентского приложения)

#### 5.3.1 Управление загрузками

- `POST /api/v1/downloads` - инициирование загрузки
- `GET /api/v1/downloads` - получение списка загрузок
- `GET /api/v1/downloads/{download_id}` - получение информации о загрузке
- `PATCH /api/v1/downloads/{download_id}` - управление статусом загрузки
- `PATCH /api/v1/downloads/{download_id}/priority` - изменение приоритета загрузки

#### 5.3.2 Управление обновлениями

- `GET /api/v1/updates/check` - проверка наличия обновлений
- `POST /api/v1/updates/apply` - инициирование обновления
- `GET /api/v1/updates/history` - получение истории обновлений

#### 5.3.3 Проверка целостности

- `POST /api/v1/verification` - инициирование проверки целостности
- `GET /api/v1/verification/{verification_id}` - получение результатов проверки
- `POST /api/v1/verification/{verification_id}/fix` - исправление проблем целостности

#### 5.3.4 Настройки загрузки

- `GET /api/v1/settings` - получение настроек загрузки
- `PATCH /api/v1/settings` - обновление настроек загрузки
- `POST /api/v1/settings/bandwidth-schedule` - управление расписанием пропускной способности

#### 5.3.5 WebSocket API для отслеживания прогресса

- `WebSocket /api/v1/ws/downloads` - получение обновлений о прогрессе загрузок в реальном времени

### 5.4 gRPC API (для межсервисного взаимодействия)

Основные сервисы:
- `DownloadService` - управление загрузками
- `UpdateService` - управление обновлениями
- `VerificationService` - проверка целостности
- `SettingsService` - управление настройками

Основные методы:
- `InitiateDownload` - инициирование загрузки
- `GetDownload` - получение информации о загрузке
- `UpdateDownloadStatus` - обновление статуса загрузки
- `CheckForUpdates` - проверка наличия обновлений
- `InitiateUpdate` - инициирование обновления
- `VerifyGameFiles` - проверка целостности файлов
- `FixCorruptedFiles` - исправление поврежденных файлов
- `SyncGameInstallStatus` - синхронизация статуса установки

## 6. Интеграции с другими сервисами

### 6.1 Интеграция с Catalog Service

**Назначение**: Получение метаданных игр, информации о версиях и обновлениях.

**Методы взаимодействия**:
- `GetGameMetadata` - получение метаданных игры
- `GetFileMetadata` - получение метаданных файлов
- `GetUpdateInfo` - получение информации об обновлениях
- `CheckAvailableUpdates` - проверка доступных обновлений

**Протокол**: gRPC

**Обработка ошибок**:
- Circuit Breaker с возвратом кэшированных данных при недоступности
- Retry с экспоненциальной задержкой при таймаутах
- Fallback на локальный кэш при отсутствии данных

### 6.2 Интеграция с Library Service

**Назначение**: Проверка прав доступа и обновление статуса установки.

**Методы взаимодействия**:
- `CheckGameAccess` - проверка прав доступа к игре
- `UpdateGameInstallStatus` - обновление статуса установки
- `GetInstalledGames` - получение списка установленных игр

**Протокол**: gRPC

**Обработка ошибок**:
- Circuit Breaker с временным кэшированием прав доступа
- Retry с экспоненциальной задержкой при таймаутах
- Асинхронная очередь повторных попыток при ошибках обновления статуса

### 6.3 Интеграция с Auth Service

**Назначение**: Аутентификация и авторизация пользователей.

**Методы взаимодействия**:
- `ValidateToken` - проверка токена доступа
- `GetUserInfo` - получение информации о пользователе

**Протокол**: gRPC

**Обработка ошибок**:
- Circuit Breaker с отклонением запросов, требующих аутентификации
- Retry с экспоненциальной задержкой при таймаутах
- Возврат ошибок 401/403 при проблемах с аутентификацией/авторизацией

### 6.4 Интеграция с Account Service

**Назначение**: Получение и обновление настроек загрузки.

**Методы взаимодействия**:
- `GetDownloadSettings` - получение настроек загрузки
- `UpdateDownloadSettings` - обновление настроек загрузки

**Протокол**: gRPC

**Обработка ошибок**:
- Circuit Breaker с использованием локально кэшированных настроек
- Retry с экспоненциальной задержкой при таймаутах
- Локальное сохранение и асинхронная синхронизация при ошибках обновления

### 6.5 Интеграция с CDN

**Назначение**: Загрузка файлов игр и обновлений.

**Методы взаимодействия**:
- HTTP GET для загрузки файлов
- HTTP HEAD для проверки доступности

**Протокол**: HTTPS

**Обработка ошибок**:
- Автоматическое переключение на альтернативный CDN при недоступности
- Retry с экспоненциальной задержкой при ошибках загрузки
- Повторная загрузка с проверкой хеша при повреждении файла

## 7. Требования к безопасности, масштабируемости и отказоустойчивости

### 7.1 Требования к безопасности

#### 7.1.1 Аутентификация и авторизация

- Все запросы к API должны проходить аутентификацию через JWT-токены
- Проверка прав доступа к играм через Library Service
- Взаимная TLS-аутентификация (mTLS) для межсервисного взаимодействия
- Регулярная ротация сертификатов и ключей

#### 7.1.2 Защита данных

- Использование TLS 1.3 для всех внешних коммуникаций
- Шифрование чувствительных данных в базе данных
- Проверка хеш-сумм всех загруженных файлов
- Цифровая подпись критических файлов

#### 7.1.3 Защита от атак

- Использование CDN с защитой от DDoS
- Ограничение скорости запросов (Rate limiting)
- Использование параметризованных запросов для защиты от инъекций
- Строгая проверка сертификатов для защиты от MITM-атак

#### 7.1.4 Аудит и мониторинг безопасности

- Централизованное логирование всех событий безопасности
- Анализ паттернов загрузки для обнаружения аномалий
- Автоматическое оповещение о подозрительной активности

### 7.2 Требования к масштабируемости

#### 7.2.1 Горизонтальное масштабирование

- Stateless-архитектура для основных компонентов
- Шардирование данных по user_id
- Read-реплики для распределения нагрузки на чтение
- Кластеризация Redis с консистентным хешированием

#### 7.2.2 Управление нагрузкой

- Использование балансировщиков нагрузки с поддержкой health checks
- Глобальные и пользовательские лимиты на количество одновременных загрузок
- Очереди с приоритетами для обработки запросов
- Предварительное масштабирование перед ожидаемыми пиками

#### 7.2.3 Производительность

- Оптимизация сетевого стека
- Кэширование часто запрашиваемых данных
- Асинхронная обработка длительных операций
- Оптимизация использования памяти и CPU

### 7.3 Требования к отказоустойчивости

#### 7.3.1 Высокая доступность

- Развертывание в нескольких зонах доступности
- Автоматическое переключение на реплику при отказе мастера
- Кластеризация Redis с автоматическим переключением
- Регулярное резервное копирование

#### 7.3.2 Устойчивость к сбоям

- Автоматические повторные попытки с экспоненциальной задержкой
- Circuit Breaker для предотвращения каскадных отказов
- Мультирегиональные CDN с автоматическим переключением
- Fallback на кэшированные данные при недоступности зависимых сервисов

#### 7.3.3 Восстановление после сбоев

- Автоматическое резервное копирование базы данных
- Автоматизированные процедуры восстановления
- Мультирегиональное развертывание с возможностью переключения
- Синхронизация данных между регионами

#### 7.3.4 Мониторинг и обнаружение проблем

- Комплексный мониторинг всех компонентов
- Анализ метрик с использованием статистических методов
- Многоуровневая система алертов с приоритизацией
- Корреляция событий для выявления скрытых проблем

## 8. Реализация и развертывание

### 8.1 Технологический стек

#### 8.1.1 Языки и фреймворки

- Go для основной логики сервиса
- gRPC для межсервисного взаимодействия
- REST API на основе Gin или Echo
- WebSocket для real-time коммуникаций

#### 8.1.2 Хранилища данных

- PostgreSQL для постоянного хранения
- Redis для кэширования и очередей
- MinIO или S3-совместимое хранилище для временных файлов

#### 8.1.3 Инфраструктура

- Docker для контейнеризации
- Kubernetes для оркестрации
- Prometheus для мониторинга
- Jaeger для трассировки
- ELK или Loki для логирования

### 8.2 Этапы реализации

#### 8.2.1 Фаза 1: Базовая функциональность (1-2 месяца)

- Реализация базовой архитектуры
- Интеграция с Catalog и Library Service
- Реализация загрузки файлов с CDN
- Базовый мониторинг и логирование

#### 8.2.2 Фаза 2: Расширенная функциональность (2-3 месяца)

- Реализация обновлений и дельта-патчей
- Проверка целостности файлов
- Расширенное управление очередями
- Улучшенная интеграция с другими сервисами

#### 8.2.3 Фаза 3: Оптимизация и масштабирование (3-4 месяца)

- Оптимизация производительности
- Расширенные механизмы масштабирования
- Улучшенная отказоустойчивость
- Расширенный мониторинг и алертинг

### 8.3 Требования к развертыванию

#### 8.3.1 Окружения

- Development - для разработки и тестирования
- Staging - для интеграционного тестирования
- Production - для конечных пользователей

#### 8.3.2 Конфигурация

- Конфигурация через переменные окружения
- Централизованное управление конфигурацией
- Разделение конфигурации по окружениям

#### 8.3.3 Мониторинг и логирование

- Централизованное логирование всех компонентов
- Мониторинг ключевых метрик производительности
- Алертинг при аномалиях и ошибках

## 9. Глоссарий

- **CDN (Content Delivery Network)** - сеть доставки контента, используемая для эффективного распределения игровых файлов
- **Дельта-обновление** - обновление, содержащее только изменения между версиями, а не полную версию
- **Хеш-сумма** - уникальная строка, вычисляемая на основе содержимого файла, используется для проверки целостности
- **Circuit Breaker** - паттерн проектирования, предотвращающий каскадные отказы при недоступности зависимых сервисов
- **mTLS (mutual TLS)** - взаимная TLS-аутентификация, при которой обе стороны подтверждают свою подлинность
- **Шардирование** - разделение данных между несколькими базами данных для распределения нагрузки
- **Репликация** - создание и поддержание копий данных для обеспечения отказоустойчивости и распределения нагрузки
- **Fallback** - механизм использования альтернативного источника данных при недоступности основного
- **Rate limiting** - ограничение количества запросов в единицу времени для защиты от перегрузки и атак
- **Bulkhead** - паттерн изоляции ресурсов для предотвращения исчерпания ресурсов
