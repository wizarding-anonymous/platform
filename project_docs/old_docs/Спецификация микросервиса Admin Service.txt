# Спецификация микросервиса Admin Service

## Содержание

1. [Введение](#1-введение)
2. [Требования и цели](#2-требования-и-цели)
3. [Архитектура](#3-архитектура)
4. [Бизнес-логика и сценарии использования](#4-бизнес-логика-и-сценарии-использования)
5. [Структура данных и API](#5-структура-данных-и-api)
6. [Интеграции с другими сервисами](#6-интеграции-с-другими-сервисами)
7. [Требования к безопасности, масштабируемости и отказоустойчивости](#7-требования-к-безопасности-масштабируемости-и-отказоустойчивости)
8. [Рекомендации по реализации и развертыванию](#8-рекомендации-по-реализации-и-развертыванию)

## 1. Введение

### 1.1 Назначение документа

Данный документ представляет собой полную спецификацию микросервиса Admin Service для российского аналога платформы Steam. Документ содержит детальное описание требований, архитектуры, бизнес-логики, API, интеграций и нефункциональных требований, необходимых для полной реализации микросервиса. Он предназначен для разработчиков, архитекторов, тестировщиков и менеджеров проекта, обеспечивая единое понимание функциональности и технических аспектов сервиса.

### 1.2 Область применения

Admin Service является ключевым компонентом платформы, обеспечивающим административные функции для сотрудников компании. Сервис предоставляет инструменты для модерации контента, управления пользователями, обработки запросов в техническую поддержку, мониторинга безопасности, управления системными настройками платформы, генерации административных отчетов и управления маркетинговыми акциями на уровне всей платформы. Этот сервис является центральным узлом административного контроля над всеми аспектами функционирования платформы.

### 1.3 Связь с другими микросервисами

Admin Service тесно интегрирован со всеми компонентами платформы для выполнения своих функций:

- **Account Service**: Взаимодействует для управления пользовательскими аккаунтами, блокировки/разблокировки пользователей, изменения статусов и ролей.
- **Auth Service**: Используется для аутентификации и авторизации административного персонала, управления правами доступа.
- **Catalog Service**: Взаимодействует для модерации игр, управления видимостью контента, редактирования метаданных игр.
- **Library Service**: Получает данные о библиотеках пользователей для разрешения спорных ситуаций, может вносить изменения в библиотеки (например, при возврате средств).
- **Payment Service**: Взаимодействует для обработки возвратов, разрешения платежных споров, мониторинга транзакций.
- **Download Service**: Получает информацию о загрузках, может управлять приоритетами и доступностью контента.
- **Social Service**: Взаимодействует для модерации социального контента (отзывы, комментарии, сообщения), управления сообществами.
- **Developer Service**: Получает запросы на модерацию игр от разработчиков, отправляет результаты модерации.
- **Analytics Service**: Получает аналитические данные для административных отчетов и мониторинга платформы.
- **Notification Service**: Инициирует отправку уведомлений пользователям и разработчикам о результатах модерации, ответах поддержки и т.д.

## 2. Требования и цели

### 2.1 Назначение сервиса

Основное назначение Admin Service — предоставить сотрудникам компании централизованный и защищенный инструмент для управления всеми аспектами платформы, обеспечения качества контента, поддержки пользователей и мониторинга работы системы.

### 2.2 Основные цели

1. **Модерация контента**: Обеспечить эффективные инструменты для проверки и модерации игр, отзывов, комментариев, сообщений и другого пользовательского контента.
2. **Управление пользователями**: Предоставить возможности для управления пользовательскими аккаунтами, включая блокировку нарушителей, восстановление доступа, изменение ролей и прав.
3. **Техническая поддержка**: Реализовать систему обработки запросов пользователей в техническую поддержку, включая тикеты, чаты и базу знаний.
4. **Мониторинг безопасности**: Обеспечить инструменты для выявления и реагирования на нарушения безопасности, подозрительную активность и мошенничество.
5. **Управление настройками**: Предоставить интерфейс для управления глобальными настройками платформы, включая параметры работы сервисов, лимиты и ограничения.
6. **Административная аналитика**: Обеспечить доступ к детальной аналитике и отчетам о работе платформы для принятия управленческих решений.
7. **Маркетинговые кампании**: Предоставить инструменты для создания и управления маркетинговыми акциями, баннерами и специальными предложениями на уровне всей платформы.

### 2.3 Функциональные требования

#### 2.3.1 Модерация контента

- **Модерация игр**: Проверка новых игр и обновлений перед публикацией, включая проверку контента, метаданных, скриншотов, видео на соответствие правилам платформы и законодательству.
- **Модерация отзывов и комментариев**: Проверка и модерация пользовательских отзывов и комментариев, возможность удаления или редактирования неприемлемого контента.
- **Модерация сообщений**: Проверка сообщений пользователей по жалобам, возможность блокировки переписки.
- **Модерация профилей**: Проверка аватаров, имен и другой информации в профилях пользователей.
- **Очереди модерации**: Организация очередей модерации по типам контента, приоритетам, возрастным рейтингам.
- **Автоматическая модерация**: Настройка и управление автоматическими фильтрами для предварительной проверки контента.

#### 2.3.2 Управление пользователями

- **Поиск пользователей**: Расширенный поиск по различным параметрам (email, имя, ID, IP-адрес и т.д.).
- **Управление статусами**: Возможность блокировки, разблокировки, предупреждения пользователей.
- **Управление ролями**: Назначение и изменение ролей пользователей (игрок, разработчик, модератор и т.д.).
- **История действий**: Просмотр истории действий пользователя на платформе.
- **Управление верификацией**: Ручная верификация пользователей при необходимости.
- **Объединение аккаунтов**: Инструменты для объединения дублирующихся аккаунтов.

#### 2.3.3 Техническая поддержка

- **Система тикетов**: Управление запросами пользователей через систему тикетов с категоризацией, приоритетами и статусами.
- **Чат поддержки**: Возможность прямого общения с пользователями через чат.
- **База знаний**: Создание и управление базой знаний для типовых проблем и решений.
- **Шаблоны ответов**: Создание и использование шаблонов для типовых ответов.
- **Эскалация проблем**: Механизм эскалации сложных проблем на более высокий уровень поддержки.
- **Статистика поддержки**: Сбор и анализ статистики по работе технической поддержки.

#### 2.3.4 Мониторинг безопасности

- **Мониторинг подозрительной активности**: Выявление и анализ подозрительной активности пользователей.
- **Анализ платежных операций**: Выявление потенциально мошеннических платежей.
- **Мониторинг попыток взлома**: Отслеживание попыток несанкционированного доступа.
- **Управление IP-блокировками**: Возможность блокировки подозрительных IP-адресов.
- **Аудит действий администраторов**: Логирование и анализ действий административного персонала.
- **Реагирование на инциденты**: Инструменты для быстрого реагирования на инциденты безопасности.

#### 2.3.5 Управление настройками платформы

- **Глобальные параметры**: Управление глобальными параметрами работы платформы.
- **Региональные настройки**: Настройка параметров для различных регионов.
- **Управление лимитами**: Настройка лимитов и ограничений (размер загружаемых файлов, количество запросов и т.д.).
- **Настройка уведомлений**: Управление системными уведомлениями.
- **Управление баннерами**: Настройка информационных баннеров на платформе.
- **Управление техническими работами**: Планирование и информирование о технических работах.

#### 2.3.6 Административная аналитика

- **Дашборды**: Интерактивные дашборды с ключевыми показателями работы платформы.
- **Отчеты по продажам**: Генерация и просмотр отчетов по продажам игр.
- **Отчеты по пользователям**: Анализ пользовательской активности, регистраций, удержания.
- **Отчеты по контенту**: Статистика по играм, отзывам, рейтингам.
- **Отчеты по модерации**: Анализ работы модераторов, времени обработки, решений.
- **Отчеты по поддержке**: Статистика по запросам в поддержку, времени ответа, решенным проблемам.
- **Экспорт данных**: Возможность экспорта отчетов в различных форматах.

#### 2.3.7 Маркетинговые кампании

- **Создание акций**: Инструменты для создания глобальных акций и распродаж.
- **Управление баннерами**: Настройка рекламных баннеров на платформе.
- **Промокоды**: Создание и управление промокодами.
- **Специальные предложения**: Настройка специальных предложений для пользователей.
- **Уведомления о маркетинговых событиях**: Настройка массовых уведомлений о акциях и событиях.
- **Аналитика эффективности**: Инструменты для анализа эффективности маркетинговых кампаний.

### 2.4 Нефункциональные требования

- **Безопасность**: Высокий уровень защиты административного интерфейса, строгая аутентификация и авторизация, детальное логирование всех действий, защита от несанкционированного доступа.
- **Производительность**: Быстрый отклик административного интерфейса даже при работе с большими объемами данных, оптимизация запросов к базе данных.
- **Масштабируемость**: Возможность горизонтального масштабирования для обработки растущего числа административных задач и объема данных.
- **Надежность**: Высокая доступность сервиса (не менее 99.9%), отказоустойчивость, механизмы восстановления после сбоев.
- **Удобство использования**: Интуитивно понятный и эффективный интерфейс для административного персонала, минимизация количества действий для выполнения типовых задач.
- **Аудит**: Полное логирование всех административных действий с возможностью восстановления истории изменений.

## 3. Архитектура

### 3.1 Обзор архитектуры

Admin Service будет реализован как модульный монолит или набор тесно связанных микросервисов, взаимодействующих с другими сервисами платформы через REST API и/или асинхронные сообщения (например, через Kafka). Внутренняя архитектура будет следовать принципам чистой архитектуры или слоистой архитектуры для разделения бизнес-логики, доступа к данным и представления.

### 3.2 Компоненты сервиса

- **API Gateway (внутренний или общий)**: Точка входа для всех запросов к сервису, обеспечивает маршрутизацию, аутентификацию (через Auth Service), ограничение скорости.
- **Модуль модерации**: Отвечает за логику, связанную с проверкой и модерацией различных типов контента.
- **Модуль управления пользователями**: Обрабатывает операции с пользовательскими аккаунтами, ролями и правами.
- **Модуль технической поддержки**: Управляет системой тикетов, чатами поддержки и базой знаний.
- **Модуль безопасности**: Отвечает за мониторинг безопасности, выявление подозрительной активности и реагирование на инциденты.
- **Модуль настроек**: Управляет глобальными и региональными настройками платформы.
- **Модуль аналитики**: Агрегирует данные и генерирует административные отчеты.
- **Модуль маркетинга**: Управляет маркетинговыми кампаниями, акциями и баннерами.
- **Веб-интерфейс (Административная панель)**: Фронтенд-приложение (вероятно, SPA на React/Vue/Angular), предоставляющее пользовательский интерфейс для административного персонала.

### 3.3 Технологический стек (рекомендуемый)

- **Язык программирования**: Go / Python / Java / Node.js (выбор должен быть согласован с общим стеком платформы)
- **Фреймворк**: Gin (Go), Django/Flask (Python), Spring Boot (Java), Express (Node.js)
- **База данных**: PostgreSQL (для реляционных данных: пользователи, тикеты, настройки) и, возможно, MongoDB (для хранения сложных структур данных, логов, аудита).
- **Кэширование**: Redis (для кэширования сессий, часто запрашиваемых данных).
- **Очереди сообщений**: Kafka или RabbitMQ (для асинхронной обработки задач модерации, уведомлений, генерации отчетов).
- **Поисковый движок**: Elasticsearch (для полнотекстового поиска по логам, тикетам, пользовательским данным).
- **Контейнеризация**: Docker
- **Оркестрация**: Kubernetes

### 3.4 Хранение данных

- **База данных PostgreSQL**: Хранит структурированную информацию:
  - `admin_users`: Информация об административных пользователях (ID, роли, права доступа).
  - `moderation_queues`: Очереди модерации для различных типов контента.
  - `moderation_decisions`: История решений модерации.
  - `support_tickets`: Запросы в техническую поддержку.
  - `support_messages`: Сообщения в рамках тикетов поддержки.
  - `knowledge_base`: База знаний для технической поддержки.
  - `system_settings`: Глобальные и региональные настройки платформы.
  - `marketing_campaigns`: Информация о маркетинговых кампаниях и акциях.
  - `banners`: Настройки информационных и рекламных баннеров.
  - `admin_actions_log`: Журнал административных действий.
  - `security_incidents`: Записи о инцидентах безопасности.
  - `blocked_ips`: Список заблокированных IP-адресов.

- **MongoDB**: Хранит сложные структуры данных:
  - Детальные логи действий пользователей и администраторов.
  - Снимки состояния объектов до и после изменений.
  - Сложные структуры данных для аналитических отчетов.

- **Elasticsearch**: Индексирует данные для быстрого поиска:
  - Логи и аудит действий.
  - Тикеты и сообщения поддержки.
  - Пользовательские данные для быстрого поиска.

## 4. Бизнес-логика и сценарии использования

### 4.1 Модерация контента

#### 4.1.1 Модерация новой игры

1. **Получение запроса на модерацию**: Разработчик через Developer Service отправляет игру на модерацию. Admin Service получает уведомление и добавляет игру в очередь модерации.
2. **Назначение модератора**: Система автоматически или администратор вручную назначает модератора для проверки игры.
3. **Проверка контента**: Модератор проверяет игру на соответствие правилам платформы и законодательству, включая:
   - Проверку метаданных (название, описание, теги, возрастной рейтинг).
   - Проверку медиа-контента (скриншоты, трейлеры).
   - Проверку самой игры (если необходимо).
4. **Принятие решения**: Модератор принимает решение (утвердить, отклонить с указанием причин, запросить изменения).
5. **Уведомление разработчика**: Admin Service отправляет результат модерации в Developer Service, который уведомляет разработчика.
6. **Логирование**: Система логирует все действия и решения модератора.

#### 4.1.2 Модерация пользовательского контента

1. **Получение контента на модерацию**: Система получает новый пользовательский контент (отзыв, комментарий) или жалобу на существующий контент.
2. **Автоматическая проверка**: Система выполняет автоматическую проверку на запрещенный контент (нецензурная лексика, спам).
3. **Ручная модерация**: Если автоматическая проверка выявила проблемы или получена жалоба, контент направляется на ручную модерацию.
4. **Принятие решения**: Модератор принимает решение (оставить, удалить, отредактировать).
5. **Применение решения**: Система применяет решение модератора, обновляя или удаляя контент через соответствующий сервис (Social Service, Catalog Service).
6. **Уведомление пользователя**: При необходимости система отправляет уведомление пользователю о принятом решении.
7. **Логирование**: Система логирует все действия и решения модератора.

### 4.2 Управление пользователями

#### 4.2.1 Блокировка пользователя

1. **Выявление нарушения**: Модератор выявляет нарушение правил пользователем или получает жалобу.
2. **Проверка истории**: Модератор проверяет историю пользователя, предыдущие нарушения и предупреждения.
3. **Принятие решения**: Модератор принимает решение о блокировке (временной или постоянной) с указанием причины.
4. **Применение блокировки**: Система отправляет запрос в Account Service для изменения статуса пользователя.
5. **Уведомление пользователя**: Система отправляет уведомление пользователю о блокировке через Notification Service.
6. **Логирование**: Система логирует действие модератора и причину блокировки.

#### 4.2.2 Изменение роли пользователя

1. **Запрос на изменение роли**: Администратор получает запрос на изменение роли пользователя (например, повышение до разработчика).
2. **Проверка данных**: Администратор проверяет данные пользователя и основания для изменения роли.
3. **Принятие решения**: Администратор принимает решение об изменении роли.
4. **Применение изменений**: Система отправляет запрос в Account Service для изменения роли пользователя.
5. **Уведомление пользователя**: Система отправляет уведомление пользователю об изменении роли.
6. **Логирование**: Система логирует действие администратора и изменение роли.

### 4.3 Техническая поддержка

#### 4.3.1 Обработка тикета поддержки

1. **Получение тикета**: Пользователь создает тикет в системе поддержки. Тикет попадает в очередь.
2. **Назначение агента**: Система автоматически или руководитель поддержки вручную назначает агента для обработки тикета.
3. **Анализ проблемы**: Агент анализирует проблему, при необходимости запрашивает дополнительную информацию у пользователя.
4. **Решение проблемы**: Агент решает проблему, возможно, взаимодействуя с другими сервисами (например, Payment Service для возврата средств).
5. **Ответ пользователю**: Агент отправляет ответ пользователю через систему тикетов.
6. **Закрытие тикета**: После подтверждения решения проблемы тикет закрывается.
7. **Логирование**: Система логирует все действия и коммуникации в рамках тикета.

#### 4.3.2 Управление базой знаний

1. **Выявление типовой проблемы**: Агент поддержки выявляет часто встречающуюся проблему.
2. **Создание статьи**: Агент создает статью в базе знаний с описанием проблемы и решения.
3. **Проверка и утверждение**: Руководитель поддержки проверяет и утверждает статью.
4. **Публикация**: Статья публикуется в базе знаний и становится доступной для пользователей и агентов поддержки.
5. **Обновление**: При необходимости статья обновляется с учетом новой информации или изменений в системе.

### 4.4 Мониторинг безопасности

#### 4.4.1 Обработка инцидента безопасности

1. **Выявление инцидента**: Система автоматически выявляет подозрительную активность или сотрудник безопасности получает сообщение о возможном инциденте.
2. **Анализ инцидента**: Сотрудник безопасности анализирует инцидент, собирает дополнительную информацию.
3. **Принятие мер**: Сотрудник принимает решение о необходимых мерах (блокировка IP, блокировка аккаунта, эскалация).
4. **Применение мер**: Система применяет выбранные меры, взаимодействуя с соответствующими сервисами.
5. **Документирование**: Сотрудник документирует инцидент и принятые меры.
6. **Анализ последствий**: После разрешения инцидента проводится анализ его причин и последствий.
7. **Превентивные меры**: На основе анализа разрабатываются и внедряются превентивные меры.

#### 4.4.2 Мониторинг подозрительных платежей

1. **Выявление подозрительного платежа**: Система автоматически выявляет платеж с признаками мошенничества.
2. **Анализ платежа**: Сотрудник безопасности анализирует платеж, историю пользователя, другие транзакции.
3. **Принятие решения**: Сотрудник принимает решение (разрешить, заблокировать, запросить дополнительную верификацию).
4. **Применение решения**: Система применяет решение, взаимодействуя с Payment Service.
5. **Уведомление пользователя**: При необходимости система отправляет уведомление пользователю.
6. **Логирование**: Система логирует все действия и решения.

### 4.5 Управление настройками платформы

#### 4.5.1 Изменение глобальных настроек

1. **Инициирование изменения**: Администратор инициирует изменение глобальной настройки платформы.
2. **Проверка влияния**: Система анализирует и отображает потенциальное влияние изменения.
3. **Подтверждение**: Администратор подтверждает изменение, возможно, с указанием времени применения.
4. **Применение изменения**: Система применяет изменение, обновляя настройки в соответствующих сервисах.
5. **Мониторинг**: Система мониторит влияние изменения на работу платформы.
6. **Логирование**: Система логирует изменение настройки и его инициатора.

#### 4.5.2 Планирование технических работ

1. **Создание плана работ**: Администратор создает план технических работ с указанием времени, затрагиваемых сервисов и ожидаемого влияния.
2. **Утверждение плана**: План утверждается руководством.
3. **Информирование пользователей**: Система отправляет уведомления пользователям о предстоящих работах.
4. **Выполнение работ**: В назначенное время проводятся технические работы.
5. **Мониторинг**: Система мониторит процесс и результаты работ.
6. **Информирование о завершении**: После завершения работ система отправляет уведомления пользователям.
7. **Документирование**: Администратор документирует проведенные работы и их результаты.

### 4.6 Административная аналитика

#### 4.6.1 Генерация отчета

1. **Запрос отчета**: Администратор запрашивает определенный тип отчета с указанием параметров (период, фильтры).
2. **Сбор данных**: Система собирает необходимые данные из различных сервисов через Analytics Service.
3. **Обработка данных**: Система обрабатывает и агрегирует данные в соответствии с требованиями отчета.
4. **Формирование отчета**: Система формирует отчет в запрошенном формате (таблица, график, PDF).
5. **Предоставление отчета**: Система предоставляет отчет администратору.
6. **Сохранение отчета**: При необходимости отчет сохраняется в системе для последующего доступа.

#### 4.6.2 Мониторинг ключевых показателей

1. **Настройка дашборда**: Администратор настраивает дашборд с ключевыми показателями для мониторинга.
2. **Сбор данных**: Система в реальном времени собирает данные для отображения на дашборде.
3. **Отображение данных**: Система отображает данные в виде графиков, счетчиков, таблиц.
4. **Настройка оповещений**: Администратор настраивает оповещения при достижении определенных пороговых значений.
5. **Отправка оповещений**: Система отправляет оповещения при срабатывании настроенных триггеров.

### 4.7 Маркетинговые кампании

#### 4.7.1 Создание глобальной акции

1. **Планирование акции**: Маркетолог планирует глобальную акцию (распродажа, специальное предложение).
2. **Настройка параметров**: Маркетолог настраивает параметры акции (сроки, условия, скидки).
3. **Выбор игр**: Маркетолог выбирает игры для участия в акции или устанавливает критерии автоматического включения.
4. **Настройка баннеров**: Маркетолог настраивает баннеры и другие визуальные элементы для акции.
5. **Утверждение**: Акция утверждается руководством.
6. **Запуск акции**: Система запускает акцию в назначенное время, обновляя цены через Catalog Service и отображая баннеры.
7. **Мониторинг**: Система мониторит эффективность акции, предоставляя данные о продажах и активности.
8. **Завершение акции**: По окончании срока система автоматически завершает акцию, возвращая обычные цены.

#### 4.7.2 Управление промокодами

1. **Создание промокода**: Маркетолог создает промокод с указанием условий использования (скидка, срок действия, ограничения).
2. **Активация промокода**: Система активирует промокод, делая его доступным для использования.
3. **Распространение**: Промокод распространяется через выбранные каналы (email, социальные сети, партнеры).
4. **Мониторинг использования**: Система отслеживает использование промокода, предоставляя данные о количестве активаций и конверсии.
5. **Деактивация**: По окончании срока или достижении лимита использований система деактивирует промокод.

## 5. Структура данных и API

### 5.1 Модели данных (Основные таблицы PostgreSQL)

```sql
-- Административные пользователи
CREATE TABLE admin_users (
    admin_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL, -- ID пользователя из Account Service
    role VARCHAR(50) NOT NULL, -- superadmin, admin, moderator, support, security, marketing
    permissions JSONB, -- Детальные права доступа
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    last_login_at TIMESTAMPTZ,
    status VARCHAR(20) DEFAULT 'active' -- active, inactive, suspended
);

-- Очереди модерации
CREATE TABLE moderation_queues (
    queue_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) NOT NULL,
    description TEXT,
    content_type VARCHAR(50) NOT NULL, -- game, review, comment, profile, etc.
    priority INTEGER DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Элементы в очередях модерации
CREATE TABLE moderation_items (
    item_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    queue_id UUID REFERENCES moderation_queues(queue_id) ON DELETE CASCADE,
    content_id VARCHAR(255) NOT NULL, -- ID контента в соответствующем сервисе
    content_type VARCHAR(50) NOT NULL, -- game, review, comment, profile, etc.
    content_data JSONB, -- Данные контента для модерации
    status VARCHAR(50) DEFAULT 'pending', -- pending, in_progress, approved, rejected, requires_changes
    assigned_to UUID REFERENCES admin_users(admin_id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    priority INTEGER DEFAULT 0,
    UNIQUE (content_type, content_id)
);

-- Решения модерации
CREATE TABLE moderation_decisions (
    decision_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    item_id UUID REFERENCES moderation_items(item_id) ON DELETE CASCADE,
    admin_id UUID REFERENCES admin_users(admin_id) ON DELETE SET NULL,
    decision VARCHAR(50) NOT NULL, -- approved, rejected, requires_changes
    reason TEXT,
    comment TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Тикеты поддержки
CREATE TABLE support_tickets (
    ticket_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL, -- ID пользователя из Account Service
    subject VARCHAR(255) NOT NULL,
    category VARCHAR(100) NOT NULL,
    priority VARCHAR(20) DEFAULT 'medium', -- low, medium, high, critical
    status VARCHAR(50) DEFAULT 'open', -- open, in_progress, waiting_for_user, resolved, closed
    assigned_to UUID REFERENCES admin_users(admin_id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    resolved_at TIMESTAMPTZ,
    closed_at TIMESTAMPTZ
);

-- Сообщения в тикетах поддержки
CREATE TABLE support_messages (
    message_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    ticket_id UUID REFERENCES support_tickets(ticket_id) ON DELETE CASCADE,
    sender_type VARCHAR(20) NOT NULL, -- user, admin
    sender_id UUID NOT NULL, -- ID пользователя или администратора
    message TEXT NOT NULL,
    attachments JSONB, -- Ссылки на прикрепленные файлы
    created_at TIMESTAMPTZ DEFAULT NOW(),
    is_read BOOLEAN DEFAULT FALSE
);

-- База знаний
CREATE TABLE knowledge_base_articles (
    article_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    category VARCHAR(100) NOT NULL,
    tags TEXT[],
    author_id UUID REFERENCES admin_users(admin_id) ON DELETE SET NULL,
    status VARCHAR(20) DEFAULT 'draft', -- draft, published, archived
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    published_at TIMESTAMPTZ
);

-- Системные настройки
CREATE TABLE system_settings (
    setting_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    category VARCHAR(100) NOT NULL,
    key VARCHAR(255) NOT NULL,
    value JSONB NOT NULL,
    description TEXT,
    updated_by UUID REFERENCES admin_users(admin_id) ON DELETE SET NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE (category, key)
);

-- Инциденты безопасности
CREATE TABLE security_incidents (
    incident_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    type VARCHAR(100) NOT NULL,
    severity VARCHAR(20) NOT NULL, -- low, medium, high, critical
    status VARCHAR(50) DEFAULT 'open', -- open, in_progress, resolved, closed
    description TEXT NOT NULL,
    affected_users TEXT[],
    affected_systems TEXT[],
    detected_at TIMESTAMPTZ DEFAULT NOW(),
    reported_by UUID REFERENCES admin_users(admin_id) ON DELETE SET NULL,
    assigned_to UUID REFERENCES admin_users(admin_id) ON DELETE SET NULL,
    resolved_at TIMESTAMPTZ,
    resolution_notes TEXT
);

-- Заблокированные IP-адреса
CREATE TABLE blocked_ips (
    block_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    ip_address INET NOT NULL,
    reason TEXT NOT NULL,
    blocked_by UUID REFERENCES admin_users(admin_id) ON DELETE SET NULL,
    blocked_at TIMESTAMPTZ DEFAULT NOW(),
    expires_at TIMESTAMPTZ,
    is_active BOOLEAN DEFAULT TRUE,
    UNIQUE (ip_address)
);

-- Маркетинговые кампании
CREATE TABLE marketing_campaigns (
    campaign_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    type VARCHAR(100) NOT NULL, -- sale, promotion, event
    status VARCHAR(50) DEFAULT 'draft', -- draft, scheduled, active, completed, cancelled
    start_date TIMESTAMPTZ NOT NULL,
    end_date TIMESTAMPTZ NOT NULL,
    discount_percentage INTEGER,
    discount_conditions JSONB,
    created_by UUID REFERENCES admin_users(admin_id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Баннеры
CREATE TABLE banners (
    banner_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title VARCHAR(255) NOT NULL,
    description TEXT,
    image_url VARCHAR(1024) NOT NULL,
    target_url VARCHAR(1024),
    placement VARCHAR(100) NOT NULL, -- home, catalog, library, etc.
    priority INTEGER DEFAULT 0,
    campaign_id UUID REFERENCES marketing_campaigns(campaign_id) ON DELETE SET NULL,
    start_date TIMESTAMPTZ NOT NULL,
    end_date TIMESTAMPTZ NOT NULL,
    status VARCHAR(20) DEFAULT 'inactive', -- inactive, active
    created_by UUID REFERENCES admin_users(admin_id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Промокоды
CREATE TABLE promo_codes (
    code_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    code VARCHAR(50) NOT NULL UNIQUE,
    description TEXT,
    discount_type VARCHAR(20) NOT NULL, -- percentage, fixed_amount
    discount_value DECIMAL(10, 2) NOT NULL,
    min_purchase_amount DECIMAL(10, 2),
    max_discount_amount DECIMAL(10, 2),
    usage_limit INTEGER,
    usage_count INTEGER DEFAULT 0,
    campaign_id UUID REFERENCES marketing_campaigns(campaign_id) ON DELETE SET NULL,
    start_date TIMESTAMPTZ NOT NULL,
    end_date TIMESTAMPTZ NOT NULL,
    status VARCHAR(20) DEFAULT 'inactive', -- inactive, active, expired
    created_by UUID REFERENCES admin_users(admin_id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Журнал административных действий
CREATE TABLE admin_actions_log (
    log_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    admin_id UUID REFERENCES admin_users(admin_id) ON DELETE SET NULL,
    action_type VARCHAR(100) NOT NULL,
    entity_type VARCHAR(100) NOT NULL,
    entity_id VARCHAR(255) NOT NULL,
    details JSONB,
    ip_address INET,
    user_agent TEXT,
    performed_at TIMESTAMPTZ DEFAULT NOW()
);
```

### 5.2 API Endpoints (REST)

Аутентификация всех запросов выполняется через JWT-токены, валидируемые с помощью Auth Service. Авторизация основана на роли и правах доступа административного пользователя.

**Префикс**: `/api/v1/admin`

**Административные пользователи:**

- `GET /users` - Получение списка административных пользователей.
- `GET /users/{admin_id}` - Получение информации о конкретном административном пользователе.
- `POST /users` - Создание нового административного пользователя.
- `PUT /users/{admin_id}` - Обновление информации об административном пользователе.
- `DELETE /users/{admin_id}` - Удаление административного пользователя.
- `PUT /users/{admin_id}/permissions` - Обновление прав доступа административного пользователя.

**Модерация:**

- `GET /moderation/queues` - Получение списка очередей модерации.
- `GET /moderation/queues/{queue_id}/items` - Получение элементов в очереди модерации.
- `GET /moderation/items/{item_id}` - Получение информации о конкретном элементе модерации.
- `PUT /moderation/items/{item_id}/assign` - Назначение элемента модерации на конкретного модератора.
- `PUT /moderation/items/{item_id}/decision` - Принятие решения по элементу модерации.
- `GET /moderation/decisions` - Получение истории решений модерации.

**Управление пользователями:**

- `GET /platform-users` - Поиск пользователей платформы (с фильтрами).
- `GET /platform-users/{user_id}` - Получение детальной информации о пользователе.
- `PUT /platform-users/{user_id}/status` - Изменение статуса пользователя (блокировка/разблокировка).
- `PUT /platform-users/{user_id}/role` - Изменение роли пользователя.
- `GET /platform-users/{user_id}/history` - Получение истории действий пользователя.

**Техническая поддержка:**

- `GET /support/tickets` - Получение списка тикетов поддержки (с фильтрами).
- `GET /support/tickets/{ticket_id}` - Получение информации о конкретном тикете.
- `PUT /support/tickets/{ticket_id}/assign` - Назначение тикета на агента поддержки.
- `PUT /support/tickets/{ticket_id}/status` - Изменение статуса тикета.
- `POST /support/tickets/{ticket_id}/messages` - Добавление сообщения в тикет.
- `GET /support/tickets/{ticket_id}/messages` - Получение сообщений тикета.
- `GET /support/knowledge` - Получение статей базы знаний.
- `POST /support/knowledge` - Создание новой статьи в базе знаний.
- `PUT /support/knowledge/{article_id}` - Обновление статьи в базе знаний.
- `DELETE /support/knowledge/{article_id}` - Удаление статьи из базы знаний.

**Безопасность:**

- `GET /security/incidents` - Получение списка инцидентов безопасности.
- `POST /security/incidents` - Создание нового инцидента безопасности.
- `PUT /security/incidents/{incident_id}` - Обновление информации об инциденте.
- `GET /security/blocked-ips` - Получение списка заблокированных IP-адресов.
- `POST /security/blocked-ips` - Блокировка нового IP-адреса.
- `DELETE /security/blocked-ips/{block_id}` - Разблокировка IP-адреса.
- `GET /security/audit-log` - Получение журнала аудита (с фильтрами).

**Настройки платформы:**

- `GET /settings` - Получение системных настроек (с фильтрами по категориям).
- `PUT /settings/{setting_id}` - Обновление системной настройки.
- `POST /settings` - Создание новой системной настройки.
- `DELETE /settings/{setting_id}` - Удаление системной настройки.
- `POST /maintenance` - Планирование технических работ.
- `GET /maintenance` - Получение информации о запланированных технических работах.
- `PUT /maintenance/{maintenance_id}` - Обновление информации о технических работах.

**Аналитика:**

- `GET /analytics/dashboard` - Получение данных для административного дашборда.
- `GET /analytics/reports` - Получение списка доступных отчетов.
- `POST /analytics/reports/{report_type}` - Генерация отчета определенного типа.
- `GET /analytics/reports/status/{report_id}` - Проверка статуса генерации отчета.
- `GET /analytics/reports/download/{report_id}` - Скачивание сгенерированного отчета.

**Маркетинг:**

- `GET /marketing/campaigns` - Получение списка маркетинговых кампаний.
- `POST /marketing/campaigns` - Создание новой маркетинговой кампании.
- `GET /marketing/campaigns/{campaign_id}` - Получение информации о конкретной кампании.
- `PUT /marketing/campaigns/{campaign_id}` - Обновление информации о кампании.
- `DELETE /marketing/campaigns/{campaign_id}` - Удаление кампании.
- `GET /marketing/banners` - Получение списка баннеров.
- `POST /marketing/banners` - Создание нового баннера.
- `PUT /marketing/banners/{banner_id}` - Обновление информации о баннере.
- `DELETE /marketing/banners/{banner_id}` - Удаление баннера.
- `GET /marketing/promo-codes` - Получение списка промокодов.
- `POST /marketing/promo-codes` - Создание нового промокода.
- `PUT /marketing/promo-codes/{code_id}` - Обновление информации о промокоде.
- `DELETE /marketing/promo-codes/{code_id}` - Удаление промокода.

## 6. Интеграции с другими сервисами

### 6.1 Взаимодействие с Account Service

- **Получение данных о пользователях**: Admin Service запрашивает у Account Service информацию о пользователях для отображения в административной панели, поиска пользователей, просмотра профилей.
- **Управление статусами пользователей**: Admin Service отправляет запросы в Account Service для блокировки/разблокировки пользователей, изменения их статусов.
- **Управление ролями пользователей**: Admin Service отправляет запросы в Account Service для изменения ролей пользователей (например, повышение до разработчика).
- **Верификация пользователей**: Admin Service может инициировать или подтверждать верификацию пользователей через Account Service.

### 6.2 Взаимодействие с Auth Service

- **Аутентификация и авторизация**: Admin Service использует Auth Service для аутентификации административных пользователей и проверки их прав доступа.
- **Управление сессиями**: Admin Service взаимодействует с Auth Service для управления сессиями административных пользователей.
- **Аудит действий**: Admin Service отправляет информацию об административных действиях в Auth Service для централизованного аудита.

### 6.3 Взаимодействие с Catalog Service

- **Модерация игр**: Admin Service отправляет результаты модерации игр в Catalog Service для обновления статусов и метаданных игр.
- **Управление видимостью**: Admin Service может управлять видимостью игр в каталоге через Catalog Service.
- **Управление ценами и скидками**: При проведении глобальных акций Admin Service отправляет информацию о скидках в Catalog Service.
- **Получение данных о играх**: Admin Service запрашивает у Catalog Service информацию о играх для административных отчетов и мониторинга.

### 6.4 Взаимодействие с Developer Service

- **Получение запросов на модерацию**: Admin Service получает от Developer Service запросы на модерацию новых игр и обновлений.
- **Отправка результатов модерации**: Admin Service отправляет результаты модерации обратно в Developer Service для информирования разработчиков.
- **Управление аккаунтами разработчиков**: Admin Service может взаимодействовать с Developer Service для управления статусами и правами разработчиков.

### 6.5 Взаимодействие с Social Service

- **Модерация социального контента**: Admin Service отправляет результаты модерации отзывов, комментариев и сообщений в Social Service.
- **Управление сообществами**: Admin Service может управлять группами и сообществами через Social Service.
- **Получение данных о социальной активности**: Admin Service запрашивает у Social Service информацию о социальной активности для мониторинга и отчетов.

### 6.6 Взаимодействие с Payment Service

- **Обработка возвратов**: Admin Service может инициировать возврат средств пользователю через Payment Service.
- **Мониторинг транзакций**: Admin Service запрашивает у Payment Service информацию о транзакциях для выявления подозрительной активности и формирования отчетов.
- **Управление промокодами**: Admin Service отправляет информацию о новых промокодах в Payment Service для их применения при оплате.

### 6.7 Взаимодействие с Analytics Service

- **Получение аналитических данных**: Admin Service запрашивает у Analytics Service агрегированные данные для административных дашбордов и отчетов.
- **Настройка метрик**: Admin Service может настраивать сбор определенных метрик через Analytics Service.
- **Генерация отчетов**: Admin Service может запрашивать генерацию сложных отчетов у Analytics Service.

### 6.8 Взаимодействие с Notification Service

- **Отправка уведомлений**: Admin Service инициирует отправку уведомлений пользователям и разработчикам через Notification Service (о результатах модерации, ответах поддержки, блокировке аккаунта и т.д.).
- **Массовые рассылки**: При проведении маркетинговых кампаний Admin Service может инициировать массовые рассылки через Notification Service.
- **Управление шаблонами**: Admin Service может управлять шаблонами уведомлений через Notification Service.

### 6.9 Взаимодействие с Download Service

- **Управление доступностью контента**: Admin Service может управлять доступностью игр для загрузки через Download Service.
- **Мониторинг загрузок**: Admin Service запрашивает у Download Service информацию о загрузках для административных отчетов.

### 6.10 Взаимодействие с Library Service

- **Управление библиотеками пользователей**: Admin Service может вносить изменения в библиотеки пользователей через Library Service (например, при разрешении спорных ситуаций).
- **Получение данных о библиотеках**: Admin Service запрашивает у Library Service информацию о библиотеках пользователей для административных отчетов и разрешения споров.

## 7. Требования к безопасности, масштабируемости и отказоустойчивости

### 7.1 Безопасность

- **Строгая аутентификация и авторизация**: Многофакторная аутентификация для всех административных пользователей. Детальная система прав доступа на основе ролей (RBAC) с принципом наименьших привилегий.
- **Защита административного интерфейса**: Доступ к административному интерфейсу только из доверенных сетей или через VPN. Ограничение по IP-адресам.
- **Шифрование данных**: Шифрование всех конфиденциальных данных при хранении и передаче. Использование HTTPS для всех коммуникаций.
- **Аудит действий**: Детальное логирование всех административных действий с сохранением информации о пользователе, времени, IP-адресе, действии и затронутых объектах.
- **Защита от атак**: Защита от CSRF, XSS, SQL-инъекций и других типов атак. Ограничение скорости запросов (rate limiting).
- **Управление сессиями**: Автоматическое завершение сессий после периода неактивности. Возможность принудительного завершения всех сессий пользователя.
- **Регулярные проверки безопасности**: Автоматизированное сканирование уязвимостей и регулярные пентесты административного интерфейса.

### 7.2 Масштабируемость

- **Горизонтальное масштабирование**: Архитектура должна позволять запуск нескольких экземпляров сервиса за балансировщиком нагрузки для обработки растущего числа административных задач.
- **Масштабирование базы данных**: Использование репликации чтения, возможное шардирование при росте объема данных.
- **Асинхронная обработка**: Использование очередей сообщений для обработки длительных задач (генерация отчетов, массовая модерация) позволяет разгрузить основной API.
- **Кэширование**: Эффективное кэширование часто запрашиваемых данных для снижения нагрузки на базу данных и улучшения отзывчивости интерфейса.
- **Оптимизация запросов**: Оптимизация сложных запросов к базе данных, использование индексов, материализованных представлений.

### 7.3 Отказоустойчивость

- **Резервирование**: Запуск нескольких экземпляров сервиса в разных зонах доступности для обеспечения высокой доступности.
- **Отказоустойчивость БД**: Использование кластера PostgreSQL с автоматическим переключением при сбое.
- **Резервное копирование**: Регулярное резервное копирование базы данных и конфигураций.
- **Деградация функциональности**: При недоступности некоторых зависимых сервисов система должна продолжать работу с ограниченной функциональностью.
- **Мониторинг и оповещения**: Настройка мониторинга ключевых метрик сервиса (время отклика, ошибки, использование ресурсов) и системы оповещения о сбоях.
- **Восстановление после сбоев**: Автоматизированные процедуры восстановления после сбоев, включая откат к предыдущим версиям при необходимости.

## 8. Рекомендации по реализации и развертыванию

### 8.1 Реализация

- **Модульность**: Разделить код на логические модули (модерация, поддержка, безопасность и т.д.) для упрощения разработки и поддержки.
- **Тестирование**: Покрытие кода юнит-тестами, интеграционными тестами и UI-тестами для административного интерфейса.
- **Обработка ошибок**: Единообразная и информативная обработка ошибок, возвращение корректных HTTP статусов и сообщений об ошибках.
- **Логирование**: Детальное логирование запросов, ошибок и важных событий с использованием структурированного формата (например, JSON) для упрощения анализа.
- **Конфигурация**: Вынесение настроек (адреса других сервисов, параметры безопасности, лимиты) в конфигурационные файлы или переменные окружения.
- **Документация API**: Подробная документация API с использованием OpenAPI/Swagger для упрощения интеграции и тестирования.

### 8.2 Развертывание

- **Контейнеризация**: Упаковка приложения в Docker-контейнеры для обеспечения единообразия сред разработки, тестирования и продакшена.
- **Оркестрация**: Использование Kubernetes для управления развертыванием, масштабированием и сетевым взаимодействием.
- **CI/CD**: Настройка конвейера непрерывной интеграции и доставки для автоматической сборки, тестирования и развертывания приложения.
- **Миграции БД**: Использование инструментов для управления миграциями схемы базы данных (например, Alembic для Python, Flyway для Java).
- **Мониторинг**: Интеграция с системой мониторинга (Prometheus, Grafana) и логирования (ELK stack, Loki).
- **Резервное копирование**: Настройка регулярного резервного копирования данных и конфигураций.
- **Управление секретами**: Использование специализированных решений для управления секретами (например, HashiCorp Vault, Kubernetes Secrets).

### 8.3 Рекомендации по безопасности при развертывании

- **Сегментация сети**: Размещение административного сервиса в отдельном сегменте сети с ограниченным доступом.
- **Минимизация поверхности атаки**: Отключение неиспользуемых сервисов и портов, использование минимальных образов контейнеров.
- **Регулярные обновления**: Настройка процесса регулярного обновления зависимостей и компонентов для устранения уязвимостей.
- **Сканирование уязвимостей**: Интеграция сканирования уязвимостей в процесс CI/CD.
- **Защита от DDoS**: Настройка защиты от DDoS-атак на уровне инфраструктуры.
- **Аудит доступа**: Регулярный аудит прав доступа административных пользователей и ротация учетных данных.
